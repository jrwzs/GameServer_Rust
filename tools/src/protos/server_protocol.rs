// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `server_protocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct R_B_START {
    // message fields
    pub room_pt: ::protobuf::SingularPtrField<super::base::RoomPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a R_B_START {
    fn default() -> &'a R_B_START {
        <R_B_START as ::protobuf::Message>::default_instance()
    }
}

impl R_B_START {
    pub fn new() -> R_B_START {
        ::std::default::Default::default()
    }

    // .protos.RoomPt room_pt = 1;


    pub fn get_room_pt(&self) -> &super::base::RoomPt {
        self.room_pt.as_ref().unwrap_or_else(|| <super::base::RoomPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_room_pt(&mut self) {
        self.room_pt.clear();
    }

    pub fn has_room_pt(&self) -> bool {
        self.room_pt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_room_pt(&mut self, v: super::base::RoomPt) {
        self.room_pt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room_pt(&mut self) -> &mut super::base::RoomPt {
        if self.room_pt.is_none() {
            self.room_pt.set_default();
        }
        self.room_pt.as_mut().unwrap()
    }

    // Take field
    pub fn take_room_pt(&mut self) -> super::base::RoomPt {
        self.room_pt.take().unwrap_or_else(|| super::base::RoomPt::new())
    }
}

impl ::protobuf::Message for R_B_START {
    fn is_initialized(&self) -> bool {
        for v in &self.room_pt {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.room_pt)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.room_pt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.room_pt.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> R_B_START {
        R_B_START::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RoomPt>>(
                "room_pt",
                |m: &R_B_START| { &m.room_pt },
                |m: &mut R_B_START| { &mut m.room_pt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<R_B_START>(
                "R_B_START",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static R_B_START {
        static instance: ::protobuf::rt::LazyV2<R_B_START> = ::protobuf::rt::LazyV2::INIT;
        instance.get(R_B_START::new)
    }
}

impl ::protobuf::Clear for R_B_START {
    fn clear(&mut self) {
        self.room_pt.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for R_B_START {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for R_B_START {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct G_R_CREATE_ROOM {
    // message fields
    pub room_type: u32,
    pub pbp: ::protobuf::SingularPtrField<PlayerBattlePt>,
    pub setting: ::protobuf::SingularPtrField<super::base::RoomSettingPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a G_R_CREATE_ROOM {
    fn default() -> &'a G_R_CREATE_ROOM {
        <G_R_CREATE_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl G_R_CREATE_ROOM {
    pub fn new() -> G_R_CREATE_ROOM {
        ::std::default::Default::default()
    }

    // uint32 room_type = 1;


    pub fn get_room_type(&self) -> u32 {
        self.room_type
    }
    pub fn clear_room_type(&mut self) {
        self.room_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_type(&mut self, v: u32) {
        self.room_type = v;
    }

    // .protos.PlayerBattlePt pbp = 2;


    pub fn get_pbp(&self) -> &PlayerBattlePt {
        self.pbp.as_ref().unwrap_or_else(|| <PlayerBattlePt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pbp(&mut self) {
        self.pbp.clear();
    }

    pub fn has_pbp(&self) -> bool {
        self.pbp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pbp(&mut self, v: PlayerBattlePt) {
        self.pbp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pbp(&mut self) -> &mut PlayerBattlePt {
        if self.pbp.is_none() {
            self.pbp.set_default();
        }
        self.pbp.as_mut().unwrap()
    }

    // Take field
    pub fn take_pbp(&mut self) -> PlayerBattlePt {
        self.pbp.take().unwrap_or_else(|| PlayerBattlePt::new())
    }

    // .protos.RoomSettingPt setting = 3;


    pub fn get_setting(&self) -> &super::base::RoomSettingPt {
        self.setting.as_ref().unwrap_or_else(|| <super::base::RoomSettingPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_setting(&mut self) {
        self.setting.clear();
    }

    pub fn has_setting(&self) -> bool {
        self.setting.is_some()
    }

    // Param is passed by value, moved
    pub fn set_setting(&mut self, v: super::base::RoomSettingPt) {
        self.setting = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_setting(&mut self) -> &mut super::base::RoomSettingPt {
        if self.setting.is_none() {
            self.setting.set_default();
        }
        self.setting.as_mut().unwrap()
    }

    // Take field
    pub fn take_setting(&mut self) -> super::base::RoomSettingPt {
        self.setting.take().unwrap_or_else(|| super::base::RoomSettingPt::new())
    }
}

impl ::protobuf::Message for G_R_CREATE_ROOM {
    fn is_initialized(&self) -> bool {
        for v in &self.pbp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.setting {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_type = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pbp)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.setting)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.pbp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.setting.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_type != 0 {
            os.write_uint32(1, self.room_type)?;
        }
        if let Some(ref v) = self.pbp.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.setting.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> G_R_CREATE_ROOM {
        G_R_CREATE_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_type",
                |m: &G_R_CREATE_ROOM| { &m.room_type },
                |m: &mut G_R_CREATE_ROOM| { &mut m.room_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerBattlePt>>(
                "pbp",
                |m: &G_R_CREATE_ROOM| { &m.pbp },
                |m: &mut G_R_CREATE_ROOM| { &mut m.pbp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RoomSettingPt>>(
                "setting",
                |m: &G_R_CREATE_ROOM| { &m.setting },
                |m: &mut G_R_CREATE_ROOM| { &mut m.setting },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<G_R_CREATE_ROOM>(
                "G_R_CREATE_ROOM",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static G_R_CREATE_ROOM {
        static instance: ::protobuf::rt::LazyV2<G_R_CREATE_ROOM> = ::protobuf::rt::LazyV2::INIT;
        instance.get(G_R_CREATE_ROOM::new)
    }
}

impl ::protobuf::Clear for G_R_CREATE_ROOM {
    fn clear(&mut self) {
        self.room_type = 0;
        self.pbp.clear();
        self.setting.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for G_R_CREATE_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for G_R_CREATE_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct G_R_JOIN_ROOM {
    // message fields
    pub room_id: u32,
    pub room_type: u32,
    pub pbp: ::protobuf::SingularPtrField<PlayerBattlePt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a G_R_JOIN_ROOM {
    fn default() -> &'a G_R_JOIN_ROOM {
        <G_R_JOIN_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl G_R_JOIN_ROOM {
    pub fn new() -> G_R_JOIN_ROOM {
        ::std::default::Default::default()
    }

    // uint32 room_id = 1;


    pub fn get_room_id(&self) -> u32 {
        self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: u32) {
        self.room_id = v;
    }

    // uint32 room_type = 2;


    pub fn get_room_type(&self) -> u32 {
        self.room_type
    }
    pub fn clear_room_type(&mut self) {
        self.room_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_type(&mut self, v: u32) {
        self.room_type = v;
    }

    // .protos.PlayerBattlePt pbp = 3;


    pub fn get_pbp(&self) -> &PlayerBattlePt {
        self.pbp.as_ref().unwrap_or_else(|| <PlayerBattlePt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pbp(&mut self) {
        self.pbp.clear();
    }

    pub fn has_pbp(&self) -> bool {
        self.pbp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pbp(&mut self, v: PlayerBattlePt) {
        self.pbp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pbp(&mut self) -> &mut PlayerBattlePt {
        if self.pbp.is_none() {
            self.pbp.set_default();
        }
        self.pbp.as_mut().unwrap()
    }

    // Take field
    pub fn take_pbp(&mut self) -> PlayerBattlePt {
        self.pbp.take().unwrap_or_else(|| PlayerBattlePt::new())
    }
}

impl ::protobuf::Message for G_R_JOIN_ROOM {
    fn is_initialized(&self) -> bool {
        for v in &self.pbp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_type = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pbp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.room_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.room_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.pbp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_id != 0 {
            os.write_uint32(1, self.room_id)?;
        }
        if self.room_type != 0 {
            os.write_uint32(2, self.room_type)?;
        }
        if let Some(ref v) = self.pbp.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> G_R_JOIN_ROOM {
        G_R_JOIN_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_id",
                |m: &G_R_JOIN_ROOM| { &m.room_id },
                |m: &mut G_R_JOIN_ROOM| { &mut m.room_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_type",
                |m: &G_R_JOIN_ROOM| { &m.room_type },
                |m: &mut G_R_JOIN_ROOM| { &mut m.room_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerBattlePt>>(
                "pbp",
                |m: &G_R_JOIN_ROOM| { &m.pbp },
                |m: &mut G_R_JOIN_ROOM| { &mut m.pbp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<G_R_JOIN_ROOM>(
                "G_R_JOIN_ROOM",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static G_R_JOIN_ROOM {
        static instance: ::protobuf::rt::LazyV2<G_R_JOIN_ROOM> = ::protobuf::rt::LazyV2::INIT;
        instance.get(G_R_JOIN_ROOM::new)
    }
}

impl ::protobuf::Clear for G_R_JOIN_ROOM {
    fn clear(&mut self) {
        self.room_id = 0;
        self.room_type = 0;
        self.pbp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for G_R_JOIN_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for G_R_JOIN_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct G_R_SEARCH_ROOM {
    // message fields
    pub room_type: u32,
    pub pbp: ::protobuf::SingularPtrField<PlayerBattlePt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a G_R_SEARCH_ROOM {
    fn default() -> &'a G_R_SEARCH_ROOM {
        <G_R_SEARCH_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl G_R_SEARCH_ROOM {
    pub fn new() -> G_R_SEARCH_ROOM {
        ::std::default::Default::default()
    }

    // uint32 room_type = 1;


    pub fn get_room_type(&self) -> u32 {
        self.room_type
    }
    pub fn clear_room_type(&mut self) {
        self.room_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_type(&mut self, v: u32) {
        self.room_type = v;
    }

    // .protos.PlayerBattlePt pbp = 2;


    pub fn get_pbp(&self) -> &PlayerBattlePt {
        self.pbp.as_ref().unwrap_or_else(|| <PlayerBattlePt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pbp(&mut self) {
        self.pbp.clear();
    }

    pub fn has_pbp(&self) -> bool {
        self.pbp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pbp(&mut self, v: PlayerBattlePt) {
        self.pbp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pbp(&mut self) -> &mut PlayerBattlePt {
        if self.pbp.is_none() {
            self.pbp.set_default();
        }
        self.pbp.as_mut().unwrap()
    }

    // Take field
    pub fn take_pbp(&mut self) -> PlayerBattlePt {
        self.pbp.take().unwrap_or_else(|| PlayerBattlePt::new())
    }
}

impl ::protobuf::Message for G_R_SEARCH_ROOM {
    fn is_initialized(&self) -> bool {
        for v in &self.pbp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_type = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pbp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.pbp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_type != 0 {
            os.write_uint32(1, self.room_type)?;
        }
        if let Some(ref v) = self.pbp.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> G_R_SEARCH_ROOM {
        G_R_SEARCH_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_type",
                |m: &G_R_SEARCH_ROOM| { &m.room_type },
                |m: &mut G_R_SEARCH_ROOM| { &mut m.room_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerBattlePt>>(
                "pbp",
                |m: &G_R_SEARCH_ROOM| { &m.pbp },
                |m: &mut G_R_SEARCH_ROOM| { &mut m.pbp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<G_R_SEARCH_ROOM>(
                "G_R_SEARCH_ROOM",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static G_R_SEARCH_ROOM {
        static instance: ::protobuf::rt::LazyV2<G_R_SEARCH_ROOM> = ::protobuf::rt::LazyV2::INIT;
        instance.get(G_R_SEARCH_ROOM::new)
    }
}

impl ::protobuf::Clear for G_R_SEARCH_ROOM {
    fn clear(&mut self) {
        self.room_type = 0;
        self.pbp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for G_R_SEARCH_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for G_R_SEARCH_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct B_S_SUMMARY {
    // message fields
    pub room_type: u32,
    pub cters: ::std::vec::Vec<u32>,
    pub summary_data: ::protobuf::SingularPtrField<super::base::SummaryDataPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a B_S_SUMMARY {
    fn default() -> &'a B_S_SUMMARY {
        <B_S_SUMMARY as ::protobuf::Message>::default_instance()
    }
}

impl B_S_SUMMARY {
    pub fn new() -> B_S_SUMMARY {
        ::std::default::Default::default()
    }

    // uint32 room_type = 1;


    pub fn get_room_type(&self) -> u32 {
        self.room_type
    }
    pub fn clear_room_type(&mut self) {
        self.room_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_type(&mut self, v: u32) {
        self.room_type = v;
    }

    // repeated uint32 cters = 2;


    pub fn get_cters(&self) -> &[u32] {
        &self.cters
    }
    pub fn clear_cters(&mut self) {
        self.cters.clear();
    }

    // Param is passed by value, moved
    pub fn set_cters(&mut self, v: ::std::vec::Vec<u32>) {
        self.cters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cters(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.cters
    }

    // Take field
    pub fn take_cters(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.cters, ::std::vec::Vec::new())
    }

    // .protos.SummaryDataPt summary_data = 3;


    pub fn get_summary_data(&self) -> &super::base::SummaryDataPt {
        self.summary_data.as_ref().unwrap_or_else(|| <super::base::SummaryDataPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_summary_data(&mut self) {
        self.summary_data.clear();
    }

    pub fn has_summary_data(&self) -> bool {
        self.summary_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_summary_data(&mut self, v: super::base::SummaryDataPt) {
        self.summary_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_summary_data(&mut self) -> &mut super::base::SummaryDataPt {
        if self.summary_data.is_none() {
            self.summary_data.set_default();
        }
        self.summary_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_summary_data(&mut self) -> super::base::SummaryDataPt {
        self.summary_data.take().unwrap_or_else(|| super::base::SummaryDataPt::new())
    }
}

impl ::protobuf::Message for B_S_SUMMARY {
    fn is_initialized(&self) -> bool {
        for v in &self.summary_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_type = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.cters)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.summary_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_type, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cters {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.summary_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_type != 0 {
            os.write_uint32(1, self.room_type)?;
        }
        for v in &self.cters {
            os.write_uint32(2, *v)?;
        };
        if let Some(ref v) = self.summary_data.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> B_S_SUMMARY {
        B_S_SUMMARY::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_type",
                |m: &B_S_SUMMARY| { &m.room_type },
                |m: &mut B_S_SUMMARY| { &mut m.room_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cters",
                |m: &B_S_SUMMARY| { &m.cters },
                |m: &mut B_S_SUMMARY| { &mut m.cters },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::SummaryDataPt>>(
                "summary_data",
                |m: &B_S_SUMMARY| { &m.summary_data },
                |m: &mut B_S_SUMMARY| { &mut m.summary_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<B_S_SUMMARY>(
                "B_S_SUMMARY",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static B_S_SUMMARY {
        static instance: ::protobuf::rt::LazyV2<B_S_SUMMARY> = ::protobuf::rt::LazyV2::INIT;
        instance.get(B_S_SUMMARY::new)
    }
}

impl ::protobuf::Clear for B_S_SUMMARY {
    fn clear(&mut self) {
        self.room_type = 0;
        self.cters.clear();
        self.summary_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for B_S_SUMMARY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for B_S_SUMMARY {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct B_R_SUMMARY {
    // message fields
    pub room_type: u32,
    pub room_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a B_R_SUMMARY {
    fn default() -> &'a B_R_SUMMARY {
        <B_R_SUMMARY as ::protobuf::Message>::default_instance()
    }
}

impl B_R_SUMMARY {
    pub fn new() -> B_R_SUMMARY {
        ::std::default::Default::default()
    }

    // uint32 room_type = 1;


    pub fn get_room_type(&self) -> u32 {
        self.room_type
    }
    pub fn clear_room_type(&mut self) {
        self.room_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_type(&mut self, v: u32) {
        self.room_type = v;
    }

    // uint32 room_id = 2;


    pub fn get_room_id(&self) -> u32 {
        self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: u32) {
        self.room_id = v;
    }
}

impl ::protobuf::Message for B_R_SUMMARY {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_type = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.room_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.room_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_type != 0 {
            os.write_uint32(1, self.room_type)?;
        }
        if self.room_id != 0 {
            os.write_uint32(2, self.room_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> B_R_SUMMARY {
        B_R_SUMMARY::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_type",
                |m: &B_R_SUMMARY| { &m.room_type },
                |m: &mut B_R_SUMMARY| { &mut m.room_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_id",
                |m: &B_R_SUMMARY| { &m.room_id },
                |m: &mut B_R_SUMMARY| { &mut m.room_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<B_R_SUMMARY>(
                "B_R_SUMMARY",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static B_R_SUMMARY {
        static instance: ::protobuf::rt::LazyV2<B_R_SUMMARY> = ::protobuf::rt::LazyV2::INIT;
        instance.get(B_R_SUMMARY::new)
    }
}

impl ::protobuf::Clear for B_R_SUMMARY {
    fn clear(&mut self) {
        self.room_type = 0;
        self.room_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for B_R_SUMMARY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for B_R_SUMMARY {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerBattlePt {
    // message fields
    pub user_id: u32,
    pub nick_name: ::std::string::String,
    pub grade: u32,
    pub grade_frame: u32,
    pub soul: u32,
    pub league: ::protobuf::SingularPtrField<super::base::LeaguePt>,
    pub punish_match: ::protobuf::SingularPtrField<super::base::PunishMatchPt>,
    pub cters: ::protobuf::RepeatedField<super::base::CharacterPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerBattlePt {
    fn default() -> &'a PlayerBattlePt {
        <PlayerBattlePt as ::protobuf::Message>::default_instance()
    }
}

impl PlayerBattlePt {
    pub fn new() -> PlayerBattlePt {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // string nick_name = 2;


    pub fn get_nick_name(&self) -> &str {
        &self.nick_name
    }
    pub fn clear_nick_name(&mut self) {
        self.nick_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_nick_name(&mut self, v: ::std::string::String) {
        self.nick_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nick_name(&mut self) -> &mut ::std::string::String {
        &mut self.nick_name
    }

    // Take field
    pub fn take_nick_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nick_name, ::std::string::String::new())
    }

    // uint32 grade = 3;


    pub fn get_grade(&self) -> u32 {
        self.grade
    }
    pub fn clear_grade(&mut self) {
        self.grade = 0;
    }

    // Param is passed by value, moved
    pub fn set_grade(&mut self, v: u32) {
        self.grade = v;
    }

    // uint32 grade_frame = 4;


    pub fn get_grade_frame(&self) -> u32 {
        self.grade_frame
    }
    pub fn clear_grade_frame(&mut self) {
        self.grade_frame = 0;
    }

    // Param is passed by value, moved
    pub fn set_grade_frame(&mut self, v: u32) {
        self.grade_frame = v;
    }

    // uint32 soul = 5;


    pub fn get_soul(&self) -> u32 {
        self.soul
    }
    pub fn clear_soul(&mut self) {
        self.soul = 0;
    }

    // Param is passed by value, moved
    pub fn set_soul(&mut self, v: u32) {
        self.soul = v;
    }

    // .protos.LeaguePt league = 6;


    pub fn get_league(&self) -> &super::base::LeaguePt {
        self.league.as_ref().unwrap_or_else(|| <super::base::LeaguePt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_league(&mut self) {
        self.league.clear();
    }

    pub fn has_league(&self) -> bool {
        self.league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league(&mut self, v: super::base::LeaguePt) {
        self.league = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_league(&mut self) -> &mut super::base::LeaguePt {
        if self.league.is_none() {
            self.league.set_default();
        }
        self.league.as_mut().unwrap()
    }

    // Take field
    pub fn take_league(&mut self) -> super::base::LeaguePt {
        self.league.take().unwrap_or_else(|| super::base::LeaguePt::new())
    }

    // .protos.PunishMatchPt punish_match = 7;


    pub fn get_punish_match(&self) -> &super::base::PunishMatchPt {
        self.punish_match.as_ref().unwrap_or_else(|| <super::base::PunishMatchPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_punish_match(&mut self) {
        self.punish_match.clear();
    }

    pub fn has_punish_match(&self) -> bool {
        self.punish_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_punish_match(&mut self, v: super::base::PunishMatchPt) {
        self.punish_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_punish_match(&mut self) -> &mut super::base::PunishMatchPt {
        if self.punish_match.is_none() {
            self.punish_match.set_default();
        }
        self.punish_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_punish_match(&mut self) -> super::base::PunishMatchPt {
        self.punish_match.take().unwrap_or_else(|| super::base::PunishMatchPt::new())
    }

    // repeated .protos.CharacterPt cters = 8;


    pub fn get_cters(&self) -> &[super::base::CharacterPt] {
        &self.cters
    }
    pub fn clear_cters(&mut self) {
        self.cters.clear();
    }

    // Param is passed by value, moved
    pub fn set_cters(&mut self, v: ::protobuf::RepeatedField<super::base::CharacterPt>) {
        self.cters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cters(&mut self) -> &mut ::protobuf::RepeatedField<super::base::CharacterPt> {
        &mut self.cters
    }

    // Take field
    pub fn take_cters(&mut self) -> ::protobuf::RepeatedField<super::base::CharacterPt> {
        ::std::mem::replace(&mut self.cters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PlayerBattlePt {
    fn is_initialized(&self) -> bool {
        for v in &self.league {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.punish_match {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nick_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.grade = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.grade_frame = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.soul = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.league)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.punish_match)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.nick_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nick_name);
        }
        if self.grade != 0 {
            my_size += ::protobuf::rt::value_size(3, self.grade, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.grade_frame != 0 {
            my_size += ::protobuf::rt::value_size(4, self.grade_frame, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.soul != 0 {
            my_size += ::protobuf::rt::value_size(5, self.soul, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.league.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.punish_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.cters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if !self.nick_name.is_empty() {
            os.write_string(2, &self.nick_name)?;
        }
        if self.grade != 0 {
            os.write_uint32(3, self.grade)?;
        }
        if self.grade_frame != 0 {
            os.write_uint32(4, self.grade_frame)?;
        }
        if self.soul != 0 {
            os.write_uint32(5, self.soul)?;
        }
        if let Some(ref v) = self.league.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.punish_match.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.cters {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerBattlePt {
        PlayerBattlePt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &PlayerBattlePt| { &m.user_id },
                |m: &mut PlayerBattlePt| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nick_name",
                |m: &PlayerBattlePt| { &m.nick_name },
                |m: &mut PlayerBattlePt| { &mut m.nick_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "grade",
                |m: &PlayerBattlePt| { &m.grade },
                |m: &mut PlayerBattlePt| { &mut m.grade },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "grade_frame",
                |m: &PlayerBattlePt| { &m.grade_frame },
                |m: &mut PlayerBattlePt| { &mut m.grade_frame },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "soul",
                |m: &PlayerBattlePt| { &m.soul },
                |m: &mut PlayerBattlePt| { &mut m.soul },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::LeaguePt>>(
                "league",
                |m: &PlayerBattlePt| { &m.league },
                |m: &mut PlayerBattlePt| { &mut m.league },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::PunishMatchPt>>(
                "punish_match",
                |m: &PlayerBattlePt| { &m.punish_match },
                |m: &mut PlayerBattlePt| { &mut m.punish_match },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::CharacterPt>>(
                "cters",
                |m: &PlayerBattlePt| { &m.cters },
                |m: &mut PlayerBattlePt| { &mut m.cters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerBattlePt>(
                "PlayerBattlePt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlayerBattlePt {
        static instance: ::protobuf::rt::LazyV2<PlayerBattlePt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlayerBattlePt::new)
    }
}

impl ::protobuf::Clear for PlayerBattlePt {
    fn clear(&mut self) {
        self.user_id = 0;
        self.nick_name.clear();
        self.grade = 0;
        self.grade_frame = 0;
        self.soul = 0;
        self.league.clear();
        self.punish_match.clear();
        self.cters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerBattlePt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerBattlePt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct B_R_G_PUNISH_MATCH {
    // message fields
    pub punish_match: ::protobuf::SingularPtrField<super::base::PunishMatchPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a B_R_G_PUNISH_MATCH {
    fn default() -> &'a B_R_G_PUNISH_MATCH {
        <B_R_G_PUNISH_MATCH as ::protobuf::Message>::default_instance()
    }
}

impl B_R_G_PUNISH_MATCH {
    pub fn new() -> B_R_G_PUNISH_MATCH {
        ::std::default::Default::default()
    }

    // .protos.PunishMatchPt punish_match = 1;


    pub fn get_punish_match(&self) -> &super::base::PunishMatchPt {
        self.punish_match.as_ref().unwrap_or_else(|| <super::base::PunishMatchPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_punish_match(&mut self) {
        self.punish_match.clear();
    }

    pub fn has_punish_match(&self) -> bool {
        self.punish_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_punish_match(&mut self, v: super::base::PunishMatchPt) {
        self.punish_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_punish_match(&mut self) -> &mut super::base::PunishMatchPt {
        if self.punish_match.is_none() {
            self.punish_match.set_default();
        }
        self.punish_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_punish_match(&mut self) -> super::base::PunishMatchPt {
        self.punish_match.take().unwrap_or_else(|| super::base::PunishMatchPt::new())
    }
}

impl ::protobuf::Message for B_R_G_PUNISH_MATCH {
    fn is_initialized(&self) -> bool {
        for v in &self.punish_match {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.punish_match)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.punish_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.punish_match.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> B_R_G_PUNISH_MATCH {
        B_R_G_PUNISH_MATCH::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::PunishMatchPt>>(
                "punish_match",
                |m: &B_R_G_PUNISH_MATCH| { &m.punish_match },
                |m: &mut B_R_G_PUNISH_MATCH| { &mut m.punish_match },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<B_R_G_PUNISH_MATCH>(
                "B_R_G_PUNISH_MATCH",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static B_R_G_PUNISH_MATCH {
        static instance: ::protobuf::rt::LazyV2<B_R_G_PUNISH_MATCH> = ::protobuf::rt::LazyV2::INIT;
        instance.get(B_R_G_PUNISH_MATCH::new)
    }
}

impl ::protobuf::Clear for B_R_G_PUNISH_MATCH {
    fn clear(&mut self) {
        self.punish_match.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for B_R_G_PUNISH_MATCH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for B_R_G_PUNISH_MATCH {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct R_G_SYNC_RANK {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a R_G_SYNC_RANK {
    fn default() -> &'a R_G_SYNC_RANK {
        <R_G_SYNC_RANK as ::protobuf::Message>::default_instance()
    }
}

impl R_G_SYNC_RANK {
    pub fn new() -> R_G_SYNC_RANK {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for R_G_SYNC_RANK {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> R_G_SYNC_RANK {
        R_G_SYNC_RANK::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<R_G_SYNC_RANK>(
                "R_G_SYNC_RANK",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static R_G_SYNC_RANK {
        static instance: ::protobuf::rt::LazyV2<R_G_SYNC_RANK> = ::protobuf::rt::LazyV2::INIT;
        instance.get(R_G_SYNC_RANK::new)
    }
}

impl ::protobuf::Clear for R_G_SYNC_RANK {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for R_G_SYNC_RANK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for R_G_SYNC_RANK {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct R_S_UPDATE_SEASON {
    // message fields
    pub season_id: i32,
    pub round: u32,
    pub next_update_time: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a R_S_UPDATE_SEASON {
    fn default() -> &'a R_S_UPDATE_SEASON {
        <R_S_UPDATE_SEASON as ::protobuf::Message>::default_instance()
    }
}

impl R_S_UPDATE_SEASON {
    pub fn new() -> R_S_UPDATE_SEASON {
        ::std::default::Default::default()
    }

    // int32 season_id = 1;


    pub fn get_season_id(&self) -> i32 {
        self.season_id
    }
    pub fn clear_season_id(&mut self) {
        self.season_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_season_id(&mut self, v: i32) {
        self.season_id = v;
    }

    // uint32 round = 2;


    pub fn get_round(&self) -> u32 {
        self.round
    }
    pub fn clear_round(&mut self) {
        self.round = 0;
    }

    // Param is passed by value, moved
    pub fn set_round(&mut self, v: u32) {
        self.round = v;
    }

    // uint64 next_update_time = 3;


    pub fn get_next_update_time(&self) -> u64 {
        self.next_update_time
    }
    pub fn clear_next_update_time(&mut self) {
        self.next_update_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_update_time(&mut self, v: u64) {
        self.next_update_time = v;
    }
}

impl ::protobuf::Message for R_S_UPDATE_SEASON {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.season_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.round = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.next_update_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.season_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.season_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.round != 0 {
            my_size += ::protobuf::rt::value_size(2, self.round, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_update_time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.next_update_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.season_id != 0 {
            os.write_int32(1, self.season_id)?;
        }
        if self.round != 0 {
            os.write_uint32(2, self.round)?;
        }
        if self.next_update_time != 0 {
            os.write_uint64(3, self.next_update_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> R_S_UPDATE_SEASON {
        R_S_UPDATE_SEASON::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "season_id",
                |m: &R_S_UPDATE_SEASON| { &m.season_id },
                |m: &mut R_S_UPDATE_SEASON| { &mut m.season_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "round",
                |m: &R_S_UPDATE_SEASON| { &m.round },
                |m: &mut R_S_UPDATE_SEASON| { &mut m.round },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "next_update_time",
                |m: &R_S_UPDATE_SEASON| { &m.next_update_time },
                |m: &mut R_S_UPDATE_SEASON| { &mut m.next_update_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<R_S_UPDATE_SEASON>(
                "R_S_UPDATE_SEASON",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static R_S_UPDATE_SEASON {
        static instance: ::protobuf::rt::LazyV2<R_S_UPDATE_SEASON> = ::protobuf::rt::LazyV2::INIT;
        instance.get(R_S_UPDATE_SEASON::new)
    }
}

impl ::protobuf::Clear for R_S_UPDATE_SEASON {
    fn clear(&mut self) {
        self.season_id = 0;
        self.round = 0;
        self.next_update_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for R_S_UPDATE_SEASON {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for R_S_UPDATE_SEASON {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct G_S_MODIFY_NICK_NAME {
    // message fields
    pub nick_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a G_S_MODIFY_NICK_NAME {
    fn default() -> &'a G_S_MODIFY_NICK_NAME {
        <G_S_MODIFY_NICK_NAME as ::protobuf::Message>::default_instance()
    }
}

impl G_S_MODIFY_NICK_NAME {
    pub fn new() -> G_S_MODIFY_NICK_NAME {
        ::std::default::Default::default()
    }

    // string nick_name = 1;


    pub fn get_nick_name(&self) -> &str {
        &self.nick_name
    }
    pub fn clear_nick_name(&mut self) {
        self.nick_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_nick_name(&mut self, v: ::std::string::String) {
        self.nick_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nick_name(&mut self) -> &mut ::std::string::String {
        &mut self.nick_name
    }

    // Take field
    pub fn take_nick_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nick_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for G_S_MODIFY_NICK_NAME {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nick_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.nick_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.nick_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.nick_name.is_empty() {
            os.write_string(1, &self.nick_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> G_S_MODIFY_NICK_NAME {
        G_S_MODIFY_NICK_NAME::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nick_name",
                |m: &G_S_MODIFY_NICK_NAME| { &m.nick_name },
                |m: &mut G_S_MODIFY_NICK_NAME| { &mut m.nick_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<G_S_MODIFY_NICK_NAME>(
                "G_S_MODIFY_NICK_NAME",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static G_S_MODIFY_NICK_NAME {
        static instance: ::protobuf::rt::LazyV2<G_S_MODIFY_NICK_NAME> = ::protobuf::rt::LazyV2::INIT;
        instance.get(G_S_MODIFY_NICK_NAME::new)
    }
}

impl ::protobuf::Clear for G_S_MODIFY_NICK_NAME {
    fn clear(&mut self) {
        self.nick_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for G_S_MODIFY_NICK_NAME {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for G_S_MODIFY_NICK_NAME {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15server_protocol.proto\x12\x06protos\x1a\nbase.proto\"4\n\tR_B_STAR\
    T\x12'\n\x07room_pt\x18\x01\x20\x01(\x0b2\x0e.protos.RoomPtR\x06roomPt\"\
    \x89\x01\n\x0fG_R_CREATE_ROOM\x12\x1b\n\troom_type\x18\x01\x20\x01(\rR\
    \x08roomType\x12(\n\x03pbp\x18\x02\x20\x01(\x0b2\x16.protos.PlayerBattle\
    PtR\x03pbp\x12/\n\x07setting\x18\x03\x20\x01(\x0b2\x15.protos.RoomSettin\
    gPtR\x07setting\"o\n\rG_R_JOIN_ROOM\x12\x17\n\x07room_id\x18\x01\x20\x01\
    (\rR\x06roomId\x12\x1b\n\troom_type\x18\x02\x20\x01(\rR\x08roomType\x12(\
    \n\x03pbp\x18\x03\x20\x01(\x0b2\x16.protos.PlayerBattlePtR\x03pbp\"X\n\
    \x0fG_R_SEARCH_ROOM\x12\x1b\n\troom_type\x18\x01\x20\x01(\rR\x08roomType\
    \x12(\n\x03pbp\x18\x02\x20\x01(\x0b2\x16.protos.PlayerBattlePtR\x03pbp\"\
    z\n\x0bB_S_SUMMARY\x12\x1b\n\troom_type\x18\x01\x20\x01(\rR\x08roomType\
    \x12\x14\n\x05cters\x18\x02\x20\x03(\rR\x05cters\x128\n\x0csummary_data\
    \x18\x03\x20\x01(\x0b2\x15.protos.SummaryDataPtR\x0bsummaryData\"C\n\x0b\
    B_R_SUMMARY\x12\x1b\n\troom_type\x18\x01\x20\x01(\rR\x08roomType\x12\x17\
    \n\x07room_id\x18\x02\x20\x01(\rR\x06roomId\"\xa0\x02\n\x0ePlayerBattleP\
    t\x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\x12\x1b\n\tnick_nam\
    e\x18\x02\x20\x01(\tR\x08nickName\x12\x14\n\x05grade\x18\x03\x20\x01(\rR\
    \x05grade\x12\x1f\n\x0bgrade_frame\x18\x04\x20\x01(\rR\ngradeFrame\x12\
    \x12\n\x04soul\x18\x05\x20\x01(\rR\x04soul\x12(\n\x06league\x18\x06\x20\
    \x01(\x0b2\x10.protos.LeaguePtR\x06league\x128\n\x0cpunish_match\x18\x07\
    \x20\x01(\x0b2\x15.protos.PunishMatchPtR\x0bpunishMatch\x12)\n\x05cters\
    \x18\x08\x20\x03(\x0b2\x13.protos.CharacterPtR\x05cters\"N\n\x12B_R_G_PU\
    NISH_MATCH\x128\n\x0cpunish_match\x18\x01\x20\x01(\x0b2\x15.protos.Punis\
    hMatchPtR\x0bpunishMatch\"\x0f\n\rR_G_SYNC_RANK\"p\n\x11R_S_UPDATE_SEASO\
    N\x12\x1b\n\tseason_id\x18\x01\x20\x01(\x05R\x08seasonId\x12\x14\n\x05ro\
    und\x18\x02\x20\x01(\rR\x05round\x12(\n\x10next_update_time\x18\x03\x20\
    \x01(\x04R\x0enextUpdateTime\"3\n\x14G_S_MODIFY_NICK_NAME\x12\x1b\n\tnic\
    k_name\x18\x01\x20\x01(\tR\x08nickNameb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
