// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `battle.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct S_START_NOTICE {
    // message fields
    pub room_status: u32,
    pub tile_map_id: u32,
    pub world_cell: ::protobuf::RepeatedField<super::base::WorldCellPt>,
    pub turn_order: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_START_NOTICE {
    fn default() -> &'a S_START_NOTICE {
        <S_START_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_START_NOTICE {
    pub fn new() -> S_START_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 room_status = 1;


    pub fn get_room_status(&self) -> u32 {
        self.room_status
    }
    pub fn clear_room_status(&mut self) {
        self.room_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_status(&mut self, v: u32) {
        self.room_status = v;
    }

    // uint32 tile_map_id = 2;


    pub fn get_tile_map_id(&self) -> u32 {
        self.tile_map_id
    }
    pub fn clear_tile_map_id(&mut self) {
        self.tile_map_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_tile_map_id(&mut self, v: u32) {
        self.tile_map_id = v;
    }

    // repeated .protos.WorldCellPt world_cell = 3;


    pub fn get_world_cell(&self) -> &[super::base::WorldCellPt] {
        &self.world_cell
    }
    pub fn clear_world_cell(&mut self) {
        self.world_cell.clear();
    }

    // Param is passed by value, moved
    pub fn set_world_cell(&mut self, v: ::protobuf::RepeatedField<super::base::WorldCellPt>) {
        self.world_cell = v;
    }

    // Mutable pointer to the field.
    pub fn mut_world_cell(&mut self) -> &mut ::protobuf::RepeatedField<super::base::WorldCellPt> {
        &mut self.world_cell
    }

    // Take field
    pub fn take_world_cell(&mut self) -> ::protobuf::RepeatedField<super::base::WorldCellPt> {
        ::std::mem::replace(&mut self.world_cell, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 turn_order = 4;


    pub fn get_turn_order(&self) -> &[u32] {
        &self.turn_order
    }
    pub fn clear_turn_order(&mut self) {
        self.turn_order.clear();
    }

    // Param is passed by value, moved
    pub fn set_turn_order(&mut self, v: ::std::vec::Vec<u32>) {
        self.turn_order = v;
    }

    // Mutable pointer to the field.
    pub fn mut_turn_order(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.turn_order
    }

    // Take field
    pub fn take_turn_order(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.turn_order, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for S_START_NOTICE {
    fn is_initialized(&self) -> bool {
        for v in &self.world_cell {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_status = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tile_map_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.world_cell)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.turn_order)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_status != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_status, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tile_map_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.tile_map_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.world_cell {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.turn_order {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_status != 0 {
            os.write_uint32(1, self.room_status)?;
        }
        if self.tile_map_id != 0 {
            os.write_uint32(2, self.tile_map_id)?;
        }
        for v in &self.world_cell {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.turn_order {
            os.write_uint32(4, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_START_NOTICE {
        S_START_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_status",
                |m: &S_START_NOTICE| { &m.room_status },
                |m: &mut S_START_NOTICE| { &mut m.room_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tile_map_id",
                |m: &S_START_NOTICE| { &m.tile_map_id },
                |m: &mut S_START_NOTICE| { &mut m.tile_map_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::WorldCellPt>>(
                "world_cell",
                |m: &S_START_NOTICE| { &m.world_cell },
                |m: &mut S_START_NOTICE| { &mut m.world_cell },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "turn_order",
                |m: &S_START_NOTICE| { &m.turn_order },
                |m: &mut S_START_NOTICE| { &mut m.turn_order },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_START_NOTICE>(
                "S_START_NOTICE",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_START_NOTICE {
        static instance: ::protobuf::rt::LazyV2<S_START_NOTICE> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_START_NOTICE::new)
    }
}

impl ::protobuf::Clear for S_START_NOTICE {
    fn clear(&mut self) {
        self.room_status = 0;
        self.tile_map_id = 0;
        self.world_cell.clear();
        self.turn_order.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_START_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_START_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_CHOOSE_INDEX {
    // message fields
    pub index: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_CHOOSE_INDEX {
    fn default() -> &'a C_CHOOSE_INDEX {
        <C_CHOOSE_INDEX as ::protobuf::Message>::default_instance()
    }
}

impl C_CHOOSE_INDEX {
    pub fn new() -> C_CHOOSE_INDEX {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }
}

impl ::protobuf::Message for C_CHOOSE_INDEX {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_CHOOSE_INDEX {
        C_CHOOSE_INDEX::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "index",
                |m: &C_CHOOSE_INDEX| { &m.index },
                |m: &mut C_CHOOSE_INDEX| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_CHOOSE_INDEX>(
                "C_CHOOSE_INDEX",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static C_CHOOSE_INDEX {
        static instance: ::protobuf::rt::LazyV2<C_CHOOSE_INDEX> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C_CHOOSE_INDEX::new)
    }
}

impl ::protobuf::Clear for C_CHOOSE_INDEX {
    fn clear(&mut self) {
        self.index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_CHOOSE_INDEX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_CHOOSE_INDEX {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_CHOOSE_INDEX {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_CHOOSE_INDEX {
    fn default() -> &'a S_CHOOSE_INDEX {
        <S_CHOOSE_INDEX as ::protobuf::Message>::default_instance()
    }
}

impl S_CHOOSE_INDEX {
    pub fn new() -> S_CHOOSE_INDEX {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_CHOOSE_INDEX {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_CHOOSE_INDEX {
        S_CHOOSE_INDEX::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_succ",
                |m: &S_CHOOSE_INDEX| { &m.is_succ },
                |m: &mut S_CHOOSE_INDEX| { &mut m.is_succ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "err_mess",
                |m: &S_CHOOSE_INDEX| { &m.err_mess },
                |m: &mut S_CHOOSE_INDEX| { &mut m.err_mess },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_CHOOSE_INDEX>(
                "S_CHOOSE_INDEX",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_CHOOSE_INDEX {
        static instance: ::protobuf::rt::LazyV2<S_CHOOSE_INDEX> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_CHOOSE_INDEX::new)
    }
}

impl ::protobuf::Clear for S_CHOOSE_INDEX {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_CHOOSE_INDEX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_CHOOSE_INDEX {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_CHOOSE_INDEX_NOTICE {
    // message fields
    pub user_id: u32,
    pub index: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_CHOOSE_INDEX_NOTICE {
    fn default() -> &'a S_CHOOSE_INDEX_NOTICE {
        <S_CHOOSE_INDEX_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_CHOOSE_INDEX_NOTICE {
    pub fn new() -> S_CHOOSE_INDEX_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // uint32 index = 2;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }
}

impl ::protobuf::Message for S_CHOOSE_INDEX_NOTICE {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if self.index != 0 {
            os.write_uint32(2, self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_CHOOSE_INDEX_NOTICE {
        S_CHOOSE_INDEX_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &S_CHOOSE_INDEX_NOTICE| { &m.user_id },
                |m: &mut S_CHOOSE_INDEX_NOTICE| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "index",
                |m: &S_CHOOSE_INDEX_NOTICE| { &m.index },
                |m: &mut S_CHOOSE_INDEX_NOTICE| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_CHOOSE_INDEX_NOTICE>(
                "S_CHOOSE_INDEX_NOTICE",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_CHOOSE_INDEX_NOTICE {
        static instance: ::protobuf::rt::LazyV2<S_CHOOSE_INDEX_NOTICE> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_CHOOSE_INDEX_NOTICE::new)
    }
}

impl ::protobuf::Clear for S_CHOOSE_INDEX_NOTICE {
    fn clear(&mut self) {
        self.user_id = 0;
        self.index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_CHOOSE_INDEX_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_CHOOSE_INDEX_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_ACTION {
    // message fields
    pub action_type: u32,
    pub value: u32,
    pub target_index: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_ACTION {
    fn default() -> &'a C_ACTION {
        <C_ACTION as ::protobuf::Message>::default_instance()
    }
}

impl C_ACTION {
    pub fn new() -> C_ACTION {
        ::std::default::Default::default()
    }

    // uint32 action_type = 1;


    pub fn get_action_type(&self) -> u32 {
        self.action_type
    }
    pub fn clear_action_type(&mut self) {
        self.action_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_action_type(&mut self, v: u32) {
        self.action_type = v;
    }

    // uint32 value = 2;


    pub fn get_value(&self) -> u32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u32) {
        self.value = v;
    }

    // repeated uint32 target_index = 3;


    pub fn get_target_index(&self) -> &[u32] {
        &self.target_index
    }
    pub fn clear_target_index(&mut self) {
        self.target_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_target_index(&mut self, v: ::std::vec::Vec<u32>) {
        self.target_index = v;
    }

    // Mutable pointer to the field.
    pub fn mut_target_index(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.target_index
    }

    // Take field
    pub fn take_target_index(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.target_index, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for C_ACTION {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.action_type = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.value = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.target_index)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.action_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.action_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(2, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.target_index {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.action_type != 0 {
            os.write_uint32(1, self.action_type)?;
        }
        if self.value != 0 {
            os.write_uint32(2, self.value)?;
        }
        for v in &self.target_index {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_ACTION {
        C_ACTION::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "action_type",
                |m: &C_ACTION| { &m.action_type },
                |m: &mut C_ACTION| { &mut m.action_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "value",
                |m: &C_ACTION| { &m.value },
                |m: &mut C_ACTION| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "target_index",
                |m: &C_ACTION| { &m.target_index },
                |m: &mut C_ACTION| { &mut m.target_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_ACTION>(
                "C_ACTION",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static C_ACTION {
        static instance: ::protobuf::rt::LazyV2<C_ACTION> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C_ACTION::new)
    }
}

impl ::protobuf::Clear for C_ACTION {
    fn clear(&mut self) {
        self.action_type = 0;
        self.value = 0;
        self.target_index.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_ACTION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_ACTION {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_BATTLE_START_NOTICE {
    // message fields
    pub battle_cters: ::protobuf::RepeatedField<super::base::BattleCharacterPt>,
    pub map_data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_BATTLE_START_NOTICE {
    fn default() -> &'a S_BATTLE_START_NOTICE {
        <S_BATTLE_START_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_BATTLE_START_NOTICE {
    pub fn new() -> S_BATTLE_START_NOTICE {
        ::std::default::Default::default()
    }

    // repeated .protos.BattleCharacterPt battle_cters = 1;


    pub fn get_battle_cters(&self) -> &[super::base::BattleCharacterPt] {
        &self.battle_cters
    }
    pub fn clear_battle_cters(&mut self) {
        self.battle_cters.clear();
    }

    // Param is passed by value, moved
    pub fn set_battle_cters(&mut self, v: ::protobuf::RepeatedField<super::base::BattleCharacterPt>) {
        self.battle_cters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_battle_cters(&mut self) -> &mut ::protobuf::RepeatedField<super::base::BattleCharacterPt> {
        &mut self.battle_cters
    }

    // Take field
    pub fn take_battle_cters(&mut self) -> ::protobuf::RepeatedField<super::base::BattleCharacterPt> {
        ::std::mem::replace(&mut self.battle_cters, ::protobuf::RepeatedField::new())
    }

    // string map_data = 2;


    pub fn get_map_data(&self) -> &str {
        &self.map_data
    }
    pub fn clear_map_data(&mut self) {
        self.map_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_map_data(&mut self, v: ::std::string::String) {
        self.map_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_map_data(&mut self) -> &mut ::std::string::String {
        &mut self.map_data
    }

    // Take field
    pub fn take_map_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.map_data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_BATTLE_START_NOTICE {
    fn is_initialized(&self) -> bool {
        for v in &self.battle_cters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.battle_cters)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.map_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.battle_cters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.map_data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.map_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.battle_cters {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.map_data.is_empty() {
            os.write_string(2, &self.map_data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_BATTLE_START_NOTICE {
        S_BATTLE_START_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::BattleCharacterPt>>(
                "battle_cters",
                |m: &S_BATTLE_START_NOTICE| { &m.battle_cters },
                |m: &mut S_BATTLE_START_NOTICE| { &mut m.battle_cters },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "map_data",
                |m: &S_BATTLE_START_NOTICE| { &m.map_data },
                |m: &mut S_BATTLE_START_NOTICE| { &mut m.map_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_BATTLE_START_NOTICE>(
                "S_BATTLE_START_NOTICE",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_BATTLE_START_NOTICE {
        static instance: ::protobuf::rt::LazyV2<S_BATTLE_START_NOTICE> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_BATTLE_START_NOTICE::new)
    }
}

impl ::protobuf::Clear for S_BATTLE_START_NOTICE {
    fn clear(&mut self) {
        self.battle_cters.clear();
        self.map_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_BATTLE_START_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_BATTLE_START_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_ACTION_NOTICE {
    // message fields
    pub action_uints: ::protobuf::RepeatedField<super::base::ActionUnitPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_ACTION_NOTICE {
    fn default() -> &'a S_ACTION_NOTICE {
        <S_ACTION_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_ACTION_NOTICE {
    pub fn new() -> S_ACTION_NOTICE {
        ::std::default::Default::default()
    }

    // repeated .protos.ActionUnitPt action_uints = 1;


    pub fn get_action_uints(&self) -> &[super::base::ActionUnitPt] {
        &self.action_uints
    }
    pub fn clear_action_uints(&mut self) {
        self.action_uints.clear();
    }

    // Param is passed by value, moved
    pub fn set_action_uints(&mut self, v: ::protobuf::RepeatedField<super::base::ActionUnitPt>) {
        self.action_uints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_action_uints(&mut self) -> &mut ::protobuf::RepeatedField<super::base::ActionUnitPt> {
        &mut self.action_uints
    }

    // Take field
    pub fn take_action_uints(&mut self) -> ::protobuf::RepeatedField<super::base::ActionUnitPt> {
        ::std::mem::replace(&mut self.action_uints, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for S_ACTION_NOTICE {
    fn is_initialized(&self) -> bool {
        for v in &self.action_uints {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.action_uints)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.action_uints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.action_uints {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_ACTION_NOTICE {
        S_ACTION_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::ActionUnitPt>>(
                "action_uints",
                |m: &S_ACTION_NOTICE| { &m.action_uints },
                |m: &mut S_ACTION_NOTICE| { &mut m.action_uints },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_ACTION_NOTICE>(
                "S_ACTION_NOTICE",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_ACTION_NOTICE {
        static instance: ::protobuf::rt::LazyV2<S_ACTION_NOTICE> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_ACTION_NOTICE::new)
    }
}

impl ::protobuf::Clear for S_ACTION_NOTICE {
    fn clear(&mut self) {
        self.action_uints.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_ACTION_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_ACTION_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_BATTLE_TURN_NOTICE {
    // message fields
    pub user_id: u32,
    pub cters: ::protobuf::RepeatedField<super::base::BattleCharacterPt>,
    pub cell_buffs: ::protobuf::RepeatedField<super::base::CellBuffPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_BATTLE_TURN_NOTICE {
    fn default() -> &'a S_BATTLE_TURN_NOTICE {
        <S_BATTLE_TURN_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_BATTLE_TURN_NOTICE {
    pub fn new() -> S_BATTLE_TURN_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // repeated .protos.BattleCharacterPt cters = 2;


    pub fn get_cters(&self) -> &[super::base::BattleCharacterPt] {
        &self.cters
    }
    pub fn clear_cters(&mut self) {
        self.cters.clear();
    }

    // Param is passed by value, moved
    pub fn set_cters(&mut self, v: ::protobuf::RepeatedField<super::base::BattleCharacterPt>) {
        self.cters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cters(&mut self) -> &mut ::protobuf::RepeatedField<super::base::BattleCharacterPt> {
        &mut self.cters
    }

    // Take field
    pub fn take_cters(&mut self) -> ::protobuf::RepeatedField<super::base::BattleCharacterPt> {
        ::std::mem::replace(&mut self.cters, ::protobuf::RepeatedField::new())
    }

    // repeated .protos.CellBuffPt cell_buffs = 3;


    pub fn get_cell_buffs(&self) -> &[super::base::CellBuffPt] {
        &self.cell_buffs
    }
    pub fn clear_cell_buffs(&mut self) {
        self.cell_buffs.clear();
    }

    // Param is passed by value, moved
    pub fn set_cell_buffs(&mut self, v: ::protobuf::RepeatedField<super::base::CellBuffPt>) {
        self.cell_buffs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cell_buffs(&mut self) -> &mut ::protobuf::RepeatedField<super::base::CellBuffPt> {
        &mut self.cell_buffs
    }

    // Take field
    pub fn take_cell_buffs(&mut self) -> ::protobuf::RepeatedField<super::base::CellBuffPt> {
        ::std::mem::replace(&mut self.cell_buffs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for S_BATTLE_TURN_NOTICE {
    fn is_initialized(&self) -> bool {
        for v in &self.cters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cell_buffs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cters)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cell_buffs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.cell_buffs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        for v in &self.cters {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.cell_buffs {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_BATTLE_TURN_NOTICE {
        S_BATTLE_TURN_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &S_BATTLE_TURN_NOTICE| { &m.user_id },
                |m: &mut S_BATTLE_TURN_NOTICE| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::BattleCharacterPt>>(
                "cters",
                |m: &S_BATTLE_TURN_NOTICE| { &m.cters },
                |m: &mut S_BATTLE_TURN_NOTICE| { &mut m.cters },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::CellBuffPt>>(
                "cell_buffs",
                |m: &S_BATTLE_TURN_NOTICE| { &m.cell_buffs },
                |m: &mut S_BATTLE_TURN_NOTICE| { &mut m.cell_buffs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_BATTLE_TURN_NOTICE>(
                "S_BATTLE_TURN_NOTICE",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_BATTLE_TURN_NOTICE {
        static instance: ::protobuf::rt::LazyV2<S_BATTLE_TURN_NOTICE> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_BATTLE_TURN_NOTICE::new)
    }
}

impl ::protobuf::Clear for S_BATTLE_TURN_NOTICE {
    fn clear(&mut self) {
        self.user_id = 0;
        self.cters.clear();
        self.cell_buffs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_BATTLE_TURN_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_BATTLE_TURN_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_POS {
    // message fields
    pub field_type: u32,
    pub skill_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_POS {
    fn default() -> &'a C_POS {
        <C_POS as ::protobuf::Message>::default_instance()
    }
}

impl C_POS {
    pub fn new() -> C_POS {
        ::std::default::Default::default()
    }

    // uint32 type = 1;


    pub fn get_field_type(&self) -> u32 {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: u32) {
        self.field_type = v;
    }

    // uint32 skill_id = 2;


    pub fn get_skill_id(&self) -> u32 {
        self.skill_id
    }
    pub fn clear_skill_id(&mut self) {
        self.skill_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_skill_id(&mut self, v: u32) {
        self.skill_id = v;
    }
}

impl ::protobuf::Message for C_POS {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_type = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.skill_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.field_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.skill_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.skill_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != 0 {
            os.write_uint32(1, self.field_type)?;
        }
        if self.skill_id != 0 {
            os.write_uint32(2, self.skill_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_POS {
        C_POS::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "type",
                |m: &C_POS| { &m.field_type },
                |m: &mut C_POS| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "skill_id",
                |m: &C_POS| { &m.skill_id },
                |m: &mut C_POS| { &mut m.skill_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_POS>(
                "C_POS",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static C_POS {
        static instance: ::protobuf::rt::LazyV2<C_POS> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C_POS::new)
    }
}

impl ::protobuf::Clear for C_POS {
    fn clear(&mut self) {
        self.field_type = 0;
        self.skill_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_POS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_POS {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_POS_NOTICE {
    // message fields
    pub user_id: u32,
    pub field_type: u32,
    pub skill_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_POS_NOTICE {
    fn default() -> &'a S_POS_NOTICE {
        <S_POS_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_POS_NOTICE {
    pub fn new() -> S_POS_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // uint32 type = 2;


    pub fn get_field_type(&self) -> u32 {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: u32) {
        self.field_type = v;
    }

    // uint32 skill_id = 3;


    pub fn get_skill_id(&self) -> u32 {
        self.skill_id
    }
    pub fn clear_skill_id(&mut self) {
        self.skill_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_skill_id(&mut self, v: u32) {
        self.skill_id = v;
    }
}

impl ::protobuf::Message for S_POS_NOTICE {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_type = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.skill_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.field_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.field_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.skill_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.skill_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if self.field_type != 0 {
            os.write_uint32(2, self.field_type)?;
        }
        if self.skill_id != 0 {
            os.write_uint32(3, self.skill_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_POS_NOTICE {
        S_POS_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &S_POS_NOTICE| { &m.user_id },
                |m: &mut S_POS_NOTICE| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "type",
                |m: &S_POS_NOTICE| { &m.field_type },
                |m: &mut S_POS_NOTICE| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "skill_id",
                |m: &S_POS_NOTICE| { &m.skill_id },
                |m: &mut S_POS_NOTICE| { &mut m.skill_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_POS_NOTICE>(
                "S_POS_NOTICE",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_POS_NOTICE {
        static instance: ::protobuf::rt::LazyV2<S_POS_NOTICE> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_POS_NOTICE::new)
    }
}

impl ::protobuf::Clear for S_POS_NOTICE {
    fn clear(&mut self) {
        self.user_id = 0;
        self.field_type = 0;
        self.skill_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_POS_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_POS_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_MAP_REFRESH_NOTICE {
    // message fields
    pub room_status: u32,
    pub tile_map_id: u32,
    pub world_cell: ::protobuf::RepeatedField<super::base::WorldCellPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_MAP_REFRESH_NOTICE {
    fn default() -> &'a S_MAP_REFRESH_NOTICE {
        <S_MAP_REFRESH_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_MAP_REFRESH_NOTICE {
    pub fn new() -> S_MAP_REFRESH_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 room_status = 1;


    pub fn get_room_status(&self) -> u32 {
        self.room_status
    }
    pub fn clear_room_status(&mut self) {
        self.room_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_status(&mut self, v: u32) {
        self.room_status = v;
    }

    // uint32 tile_map_id = 2;


    pub fn get_tile_map_id(&self) -> u32 {
        self.tile_map_id
    }
    pub fn clear_tile_map_id(&mut self) {
        self.tile_map_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_tile_map_id(&mut self, v: u32) {
        self.tile_map_id = v;
    }

    // repeated .protos.WorldCellPt world_cell = 3;


    pub fn get_world_cell(&self) -> &[super::base::WorldCellPt] {
        &self.world_cell
    }
    pub fn clear_world_cell(&mut self) {
        self.world_cell.clear();
    }

    // Param is passed by value, moved
    pub fn set_world_cell(&mut self, v: ::protobuf::RepeatedField<super::base::WorldCellPt>) {
        self.world_cell = v;
    }

    // Mutable pointer to the field.
    pub fn mut_world_cell(&mut self) -> &mut ::protobuf::RepeatedField<super::base::WorldCellPt> {
        &mut self.world_cell
    }

    // Take field
    pub fn take_world_cell(&mut self) -> ::protobuf::RepeatedField<super::base::WorldCellPt> {
        ::std::mem::replace(&mut self.world_cell, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for S_MAP_REFRESH_NOTICE {
    fn is_initialized(&self) -> bool {
        for v in &self.world_cell {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_status = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tile_map_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.world_cell)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_status != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_status, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tile_map_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.tile_map_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.world_cell {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_status != 0 {
            os.write_uint32(1, self.room_status)?;
        }
        if self.tile_map_id != 0 {
            os.write_uint32(2, self.tile_map_id)?;
        }
        for v in &self.world_cell {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_MAP_REFRESH_NOTICE {
        S_MAP_REFRESH_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_status",
                |m: &S_MAP_REFRESH_NOTICE| { &m.room_status },
                |m: &mut S_MAP_REFRESH_NOTICE| { &mut m.room_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tile_map_id",
                |m: &S_MAP_REFRESH_NOTICE| { &m.tile_map_id },
                |m: &mut S_MAP_REFRESH_NOTICE| { &mut m.tile_map_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::WorldCellPt>>(
                "world_cell",
                |m: &S_MAP_REFRESH_NOTICE| { &m.world_cell },
                |m: &mut S_MAP_REFRESH_NOTICE| { &mut m.world_cell },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_MAP_REFRESH_NOTICE>(
                "S_MAP_REFRESH_NOTICE",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_MAP_REFRESH_NOTICE {
        static instance: ::protobuf::rt::LazyV2<S_MAP_REFRESH_NOTICE> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_MAP_REFRESH_NOTICE::new)
    }
}

impl ::protobuf::Clear for S_MAP_REFRESH_NOTICE {
    fn clear(&mut self) {
        self.room_status = 0;
        self.tile_map_id = 0;
        self.world_cell.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_MAP_REFRESH_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_MAP_REFRESH_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_SUMMARY_NOTICE {
    // message fields
    pub summary_datas: ::protobuf::RepeatedField<super::base::SummaryDataPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_SUMMARY_NOTICE {
    fn default() -> &'a S_SUMMARY_NOTICE {
        <S_SUMMARY_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_SUMMARY_NOTICE {
    pub fn new() -> S_SUMMARY_NOTICE {
        ::std::default::Default::default()
    }

    // repeated .protos.SummaryDataPt summary_datas = 1;


    pub fn get_summary_datas(&self) -> &[super::base::SummaryDataPt] {
        &self.summary_datas
    }
    pub fn clear_summary_datas(&mut self) {
        self.summary_datas.clear();
    }

    // Param is passed by value, moved
    pub fn set_summary_datas(&mut self, v: ::protobuf::RepeatedField<super::base::SummaryDataPt>) {
        self.summary_datas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_summary_datas(&mut self) -> &mut ::protobuf::RepeatedField<super::base::SummaryDataPt> {
        &mut self.summary_datas
    }

    // Take field
    pub fn take_summary_datas(&mut self) -> ::protobuf::RepeatedField<super::base::SummaryDataPt> {
        ::std::mem::replace(&mut self.summary_datas, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for S_SUMMARY_NOTICE {
    fn is_initialized(&self) -> bool {
        for v in &self.summary_datas {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.summary_datas)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.summary_datas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.summary_datas {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_SUMMARY_NOTICE {
        S_SUMMARY_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::SummaryDataPt>>(
                "summary_datas",
                |m: &S_SUMMARY_NOTICE| { &m.summary_datas },
                |m: &mut S_SUMMARY_NOTICE| { &mut m.summary_datas },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_SUMMARY_NOTICE>(
                "S_SUMMARY_NOTICE",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_SUMMARY_NOTICE {
        static instance: ::protobuf::rt::LazyV2<S_SUMMARY_NOTICE> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_SUMMARY_NOTICE::new)
    }
}

impl ::protobuf::Clear for S_SUMMARY_NOTICE {
    fn clear(&mut self) {
        self.summary_datas.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_SUMMARY_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_SUMMARY_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_MISSION_NOTICE {
    // message fields
    pub user_id: u32,
    pub mission_id: u32,
    pub notice_type: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_MISSION_NOTICE {
    fn default() -> &'a S_MISSION_NOTICE {
        <S_MISSION_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_MISSION_NOTICE {
    pub fn new() -> S_MISSION_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // uint32 mission_id = 2;


    pub fn get_mission_id(&self) -> u32 {
        self.mission_id
    }
    pub fn clear_mission_id(&mut self) {
        self.mission_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_mission_id(&mut self, v: u32) {
        self.mission_id = v;
    }

    // uint32 notice_type = 3;


    pub fn get_notice_type(&self) -> u32 {
        self.notice_type
    }
    pub fn clear_notice_type(&mut self) {
        self.notice_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_notice_type(&mut self, v: u32) {
        self.notice_type = v;
    }
}

impl ::protobuf::Message for S_MISSION_NOTICE {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mission_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.notice_type = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mission_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mission_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.notice_type != 0 {
            my_size += ::protobuf::rt::value_size(3, self.notice_type, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if self.mission_id != 0 {
            os.write_uint32(2, self.mission_id)?;
        }
        if self.notice_type != 0 {
            os.write_uint32(3, self.notice_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_MISSION_NOTICE {
        S_MISSION_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &S_MISSION_NOTICE| { &m.user_id },
                |m: &mut S_MISSION_NOTICE| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "mission_id",
                |m: &S_MISSION_NOTICE| { &m.mission_id },
                |m: &mut S_MISSION_NOTICE| { &mut m.mission_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "notice_type",
                |m: &S_MISSION_NOTICE| { &m.notice_type },
                |m: &mut S_MISSION_NOTICE| { &mut m.notice_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_MISSION_NOTICE>(
                "S_MISSION_NOTICE",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_MISSION_NOTICE {
        static instance: ::protobuf::rt::LazyV2<S_MISSION_NOTICE> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_MISSION_NOTICE::new)
    }
}

impl ::protobuf::Clear for S_MISSION_NOTICE {
    fn clear(&mut self) {
        self.user_id = 0;
        self.mission_id = 0;
        self.notice_type = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_MISSION_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_MISSION_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_BUY {
    // message fields
    pub merchandise_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_BUY {
    fn default() -> &'a C_BUY {
        <C_BUY as ::protobuf::Message>::default_instance()
    }
}

impl C_BUY {
    pub fn new() -> C_BUY {
        ::std::default::Default::default()
    }

    // uint32 merchandise_id = 1;


    pub fn get_merchandise_id(&self) -> u32 {
        self.merchandise_id
    }
    pub fn clear_merchandise_id(&mut self) {
        self.merchandise_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_merchandise_id(&mut self, v: u32) {
        self.merchandise_id = v;
    }
}

impl ::protobuf::Message for C_BUY {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.merchandise_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.merchandise_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.merchandise_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.merchandise_id != 0 {
            os.write_uint32(1, self.merchandise_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_BUY {
        C_BUY::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "merchandise_id",
                |m: &C_BUY| { &m.merchandise_id },
                |m: &mut C_BUY| { &mut m.merchandise_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_BUY>(
                "C_BUY",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static C_BUY {
        static instance: ::protobuf::rt::LazyV2<C_BUY> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C_BUY::new)
    }
}

impl ::protobuf::Clear for C_BUY {
    fn clear(&mut self) {
        self.merchandise_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_BUY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_BUY {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_BUY_NOTICE {
    // message fields
    pub user_id: u32,
    pub merchandise_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_BUY_NOTICE {
    fn default() -> &'a S_BUY_NOTICE {
        <S_BUY_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_BUY_NOTICE {
    pub fn new() -> S_BUY_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // uint32 merchandise_id = 2;


    pub fn get_merchandise_id(&self) -> u32 {
        self.merchandise_id
    }
    pub fn clear_merchandise_id(&mut self) {
        self.merchandise_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_merchandise_id(&mut self, v: u32) {
        self.merchandise_id = v;
    }
}

impl ::protobuf::Message for S_BUY_NOTICE {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.merchandise_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.merchandise_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.merchandise_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if self.merchandise_id != 0 {
            os.write_uint32(2, self.merchandise_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_BUY_NOTICE {
        S_BUY_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &S_BUY_NOTICE| { &m.user_id },
                |m: &mut S_BUY_NOTICE| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "merchandise_id",
                |m: &S_BUY_NOTICE| { &m.merchandise_id },
                |m: &mut S_BUY_NOTICE| { &mut m.merchandise_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_BUY_NOTICE>(
                "S_BUY_NOTICE",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_BUY_NOTICE {
        static instance: ::protobuf::rt::LazyV2<S_BUY_NOTICE> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_BUY_NOTICE::new)
    }
}

impl ::protobuf::Clear for S_BUY_NOTICE {
    fn clear(&mut self) {
        self.user_id = 0;
        self.merchandise_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_BUY_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_BUY_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cbattle.proto\x12\x06protos\x1a\nbase.proto\"\xa4\x01\n\x0eS_START_\
    NOTICE\x12\x1f\n\x0broom_status\x18\x01\x20\x01(\rR\nroomStatus\x12\x1e\
    \n\x0btile_map_id\x18\x02\x20\x01(\rR\ttileMapId\x122\n\nworld_cell\x18\
    \x03\x20\x03(\x0b2\x13.protos.WorldCellPtR\tworldCell\x12\x1d\n\nturn_or\
    der\x18\x04\x20\x03(\rR\tturnOrder\"&\n\x0eC_CHOOSE_INDEX\x12\x14\n\x05i\
    ndex\x18\x01\x20\x01(\rR\x05index\"D\n\x0eS_CHOOSE_INDEX\x12\x17\n\x07is\
    _succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_mess\x18\x02\x20\
    \x01(\tR\x07errMess\"F\n\x15S_CHOOSE_INDEX_NOTICE\x12\x17\n\x07user_id\
    \x18\x01\x20\x01(\rR\x06userId\x12\x14\n\x05index\x18\x02\x20\x01(\rR\
    \x05index\"d\n\x08C_ACTION\x12\x1f\n\x0baction_type\x18\x01\x20\x01(\rR\
    \nactionType\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value\x12!\n\x0ct\
    arget_index\x18\x03\x20\x03(\rR\x0btargetIndex\"p\n\x15S_BATTLE_START_NO\
    TICE\x12<\n\x0cbattle_cters\x18\x01\x20\x03(\x0b2\x19.protos.BattleChara\
    cterPtR\x0bbattleCters\x12\x19\n\x08map_data\x18\x02\x20\x01(\tR\x07mapD\
    ata\"J\n\x0fS_ACTION_NOTICE\x127\n\x0caction_uints\x18\x01\x20\x03(\x0b2\
    \x14.protos.ActionUnitPtR\x0bactionUints\"\x93\x01\n\x14S_BATTLE_TURN_NO\
    TICE\x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\x12/\n\x05cters\
    \x18\x02\x20\x03(\x0b2\x19.protos.BattleCharacterPtR\x05cters\x121\n\nce\
    ll_buffs\x18\x03\x20\x03(\x0b2\x12.protos.CellBuffPtR\tcellBuffs\"6\n\
    \x05C_POS\x12\x12\n\x04type\x18\x01\x20\x01(\rR\x04type\x12\x19\n\x08ski\
    ll_id\x18\x02\x20\x01(\rR\x07skillId\"V\n\x0cS_POS_NOTICE\x12\x17\n\x07u\
    ser_id\x18\x01\x20\x01(\rR\x06userId\x12\x12\n\x04type\x18\x02\x20\x01(\
    \rR\x04type\x12\x19\n\x08skill_id\x18\x03\x20\x01(\rR\x07skillId\"\x8b\
    \x01\n\x14S_MAP_REFRESH_NOTICE\x12\x1f\n\x0broom_status\x18\x01\x20\x01(\
    \rR\nroomStatus\x12\x1e\n\x0btile_map_id\x18\x02\x20\x01(\rR\ttileMapId\
    \x122\n\nworld_cell\x18\x03\x20\x03(\x0b2\x13.protos.WorldCellPtR\tworld\
    Cell\"N\n\x10S_SUMMARY_NOTICE\x12:\n\rsummary_datas\x18\x01\x20\x03(\x0b\
    2\x15.protos.SummaryDataPtR\x0csummaryDatas\"k\n\x10S_MISSION_NOTICE\x12\
    \x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\x12\x1d\n\nmission_id\
    \x18\x02\x20\x01(\rR\tmissionId\x12\x1f\n\x0bnotice_type\x18\x03\x20\x01\
    (\rR\nnoticeType\".\n\x05C_BUY\x12%\n\x0emerchandise_id\x18\x01\x20\x01(\
    \rR\rmerchandiseId\"N\n\x0cS_BUY_NOTICE\x12\x17\n\x07user_id\x18\x01\x20\
    \x01(\rR\x06userId\x12%\n\x0emerchandise_id\x18\x02\x20\x01(\rR\rmerchan\
    diseIdb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
