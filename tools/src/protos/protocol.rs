// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct C_USER_LOGIN {
    // message fields
    pub user_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_USER_LOGIN {
    fn default() -> &'a C_USER_LOGIN {
        <C_USER_LOGIN as ::protobuf::Message>::default_instance()
    }
}

impl C_USER_LOGIN {
    pub fn new() -> C_USER_LOGIN {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }
}

impl ::protobuf::Message for C_USER_LOGIN {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_USER_LOGIN {
        C_USER_LOGIN::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &C_USER_LOGIN| { &m.user_id },
                |m: &mut C_USER_LOGIN| { &mut m.user_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_USER_LOGIN>(
                "C_USER_LOGIN",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static C_USER_LOGIN {
        static instance: ::protobuf::rt::LazyV2<C_USER_LOGIN> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C_USER_LOGIN::new)
    }
}

impl ::protobuf::Clear for C_USER_LOGIN {
    fn clear(&mut self) {
        self.user_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_USER_LOGIN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_USER_LOGIN {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_USER_LOGIN {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    pub sync_time: u32,
    pub last_login_time: u32,
    pub last_logoff_time: u32,
    pub player_pt: ::protobuf::SingularPtrField<super::base::PlayerPt>,
    pub resp: ::protobuf::RepeatedField<super::base::ResourcesPt>,
    pub cters: ::protobuf::RepeatedField<super::base::CharacterPt>,
    pub grade_frames: ::std::vec::Vec<u32>,
    pub souls: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_USER_LOGIN {
    fn default() -> &'a S_USER_LOGIN {
        <S_USER_LOGIN as ::protobuf::Message>::default_instance()
    }
}

impl S_USER_LOGIN {
    pub fn new() -> S_USER_LOGIN {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }

    // uint32 sync_time = 3;


    pub fn get_sync_time(&self) -> u32 {
        self.sync_time
    }
    pub fn clear_sync_time(&mut self) {
        self.sync_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_sync_time(&mut self, v: u32) {
        self.sync_time = v;
    }

    // uint32 last_login_time = 4;


    pub fn get_last_login_time(&self) -> u32 {
        self.last_login_time
    }
    pub fn clear_last_login_time(&mut self) {
        self.last_login_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_login_time(&mut self, v: u32) {
        self.last_login_time = v;
    }

    // uint32 last_logoff_time = 5;


    pub fn get_last_logoff_time(&self) -> u32 {
        self.last_logoff_time
    }
    pub fn clear_last_logoff_time(&mut self) {
        self.last_logoff_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_logoff_time(&mut self, v: u32) {
        self.last_logoff_time = v;
    }

    // .protos.PlayerPt player_pt = 6;


    pub fn get_player_pt(&self) -> &super::base::PlayerPt {
        self.player_pt.as_ref().unwrap_or_else(|| <super::base::PlayerPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_player_pt(&mut self) {
        self.player_pt.clear();
    }

    pub fn has_player_pt(&self) -> bool {
        self.player_pt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_pt(&mut self, v: super::base::PlayerPt) {
        self.player_pt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player_pt(&mut self) -> &mut super::base::PlayerPt {
        if self.player_pt.is_none() {
            self.player_pt.set_default();
        }
        self.player_pt.as_mut().unwrap()
    }

    // Take field
    pub fn take_player_pt(&mut self) -> super::base::PlayerPt {
        self.player_pt.take().unwrap_or_else(|| super::base::PlayerPt::new())
    }

    // repeated .protos.ResourcesPt resp = 7;


    pub fn get_resp(&self) -> &[super::base::ResourcesPt] {
        &self.resp
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: ::protobuf::RepeatedField<super::base::ResourcesPt>) {
        self.resp = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resp(&mut self) -> &mut ::protobuf::RepeatedField<super::base::ResourcesPt> {
        &mut self.resp
    }

    // Take field
    pub fn take_resp(&mut self) -> ::protobuf::RepeatedField<super::base::ResourcesPt> {
        ::std::mem::replace(&mut self.resp, ::protobuf::RepeatedField::new())
    }

    // repeated .protos.CharacterPt cters = 8;


    pub fn get_cters(&self) -> &[super::base::CharacterPt] {
        &self.cters
    }
    pub fn clear_cters(&mut self) {
        self.cters.clear();
    }

    // Param is passed by value, moved
    pub fn set_cters(&mut self, v: ::protobuf::RepeatedField<super::base::CharacterPt>) {
        self.cters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cters(&mut self) -> &mut ::protobuf::RepeatedField<super::base::CharacterPt> {
        &mut self.cters
    }

    // Take field
    pub fn take_cters(&mut self) -> ::protobuf::RepeatedField<super::base::CharacterPt> {
        ::std::mem::replace(&mut self.cters, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 grade_frames = 9;


    pub fn get_grade_frames(&self) -> &[u32] {
        &self.grade_frames
    }
    pub fn clear_grade_frames(&mut self) {
        self.grade_frames.clear();
    }

    // Param is passed by value, moved
    pub fn set_grade_frames(&mut self, v: ::std::vec::Vec<u32>) {
        self.grade_frames = v;
    }

    // Mutable pointer to the field.
    pub fn mut_grade_frames(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.grade_frames
    }

    // Take field
    pub fn take_grade_frames(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.grade_frames, ::std::vec::Vec::new())
    }

    // repeated uint32 souls = 10;


    pub fn get_souls(&self) -> &[u32] {
        &self.souls
    }
    pub fn clear_souls(&mut self) {
        self.souls.clear();
    }

    // Param is passed by value, moved
    pub fn set_souls(&mut self, v: ::std::vec::Vec<u32>) {
        self.souls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_souls(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.souls
    }

    // Take field
    pub fn take_souls(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.souls, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for S_USER_LOGIN {
    fn is_initialized(&self) -> bool {
        for v in &self.player_pt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sync_time = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last_login_time = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last_logoff_time = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.player_pt)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resp)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cters)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.grade_frames)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.souls)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        if self.sync_time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sync_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_login_time != 0 {
            my_size += ::protobuf::rt::value_size(4, self.last_login_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_logoff_time != 0 {
            my_size += ::protobuf::rt::value_size(5, self.last_logoff_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.player_pt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.resp {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.cters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.grade_frames {
            my_size += ::protobuf::rt::value_size(9, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.souls {
            my_size += ::protobuf::rt::value_size(10, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        if self.sync_time != 0 {
            os.write_uint32(3, self.sync_time)?;
        }
        if self.last_login_time != 0 {
            os.write_uint32(4, self.last_login_time)?;
        }
        if self.last_logoff_time != 0 {
            os.write_uint32(5, self.last_logoff_time)?;
        }
        if let Some(ref v) = self.player_pt.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.resp {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.cters {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.grade_frames {
            os.write_uint32(9, *v)?;
        };
        for v in &self.souls {
            os.write_uint32(10, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_USER_LOGIN {
        S_USER_LOGIN::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_succ",
                |m: &S_USER_LOGIN| { &m.is_succ },
                |m: &mut S_USER_LOGIN| { &mut m.is_succ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "err_mess",
                |m: &S_USER_LOGIN| { &m.err_mess },
                |m: &mut S_USER_LOGIN| { &mut m.err_mess },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sync_time",
                |m: &S_USER_LOGIN| { &m.sync_time },
                |m: &mut S_USER_LOGIN| { &mut m.sync_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "last_login_time",
                |m: &S_USER_LOGIN| { &m.last_login_time },
                |m: &mut S_USER_LOGIN| { &mut m.last_login_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "last_logoff_time",
                |m: &S_USER_LOGIN| { &m.last_logoff_time },
                |m: &mut S_USER_LOGIN| { &mut m.last_logoff_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::PlayerPt>>(
                "player_pt",
                |m: &S_USER_LOGIN| { &m.player_pt },
                |m: &mut S_USER_LOGIN| { &mut m.player_pt },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::ResourcesPt>>(
                "resp",
                |m: &S_USER_LOGIN| { &m.resp },
                |m: &mut S_USER_LOGIN| { &mut m.resp },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::CharacterPt>>(
                "cters",
                |m: &S_USER_LOGIN| { &m.cters },
                |m: &mut S_USER_LOGIN| { &mut m.cters },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "grade_frames",
                |m: &S_USER_LOGIN| { &m.grade_frames },
                |m: &mut S_USER_LOGIN| { &mut m.grade_frames },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "souls",
                |m: &S_USER_LOGIN| { &m.souls },
                |m: &mut S_USER_LOGIN| { &mut m.souls },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_USER_LOGIN>(
                "S_USER_LOGIN",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_USER_LOGIN {
        static instance: ::protobuf::rt::LazyV2<S_USER_LOGIN> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_USER_LOGIN::new)
    }
}

impl ::protobuf::Clear for S_USER_LOGIN {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.sync_time = 0;
        self.last_login_time = 0;
        self.last_logoff_time = 0;
        self.player_pt.clear();
        self.resp.clear();
        self.cters.clear();
        self.grade_frames.clear();
        self.souls.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_USER_LOGIN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_USER_LOGIN {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HEART_BEAT {
    // message fields
    pub sys_time: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HEART_BEAT {
    fn default() -> &'a HEART_BEAT {
        <HEART_BEAT as ::protobuf::Message>::default_instance()
    }
}

impl HEART_BEAT {
    pub fn new() -> HEART_BEAT {
        ::std::default::Default::default()
    }

    // uint64 sys_time = 1;


    pub fn get_sys_time(&self) -> u64 {
        self.sys_time
    }
    pub fn clear_sys_time(&mut self) {
        self.sys_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_sys_time(&mut self, v: u64) {
        self.sys_time = v;
    }
}

impl ::protobuf::Message for HEART_BEAT {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sys_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sys_time != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sys_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sys_time != 0 {
            os.write_uint64(1, self.sys_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HEART_BEAT {
        HEART_BEAT::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sys_time",
                |m: &HEART_BEAT| { &m.sys_time },
                |m: &mut HEART_BEAT| { &mut m.sys_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HEART_BEAT>(
                "HEART_BEAT",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HEART_BEAT {
        static instance: ::protobuf::rt::LazyV2<HEART_BEAT> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HEART_BEAT::new)
    }
}

impl ::protobuf::Clear for HEART_BEAT {
    fn clear(&mut self) {
        self.sys_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HEART_BEAT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HEART_BEAT {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_SYNC_DATA {
    // message fields
    pub player_pt: ::protobuf::SingularPtrField<super::base::PlayerPt>,
    pub resp: ::protobuf::RepeatedField<super::base::ResourcesPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_SYNC_DATA {
    fn default() -> &'a C_SYNC_DATA {
        <C_SYNC_DATA as ::protobuf::Message>::default_instance()
    }
}

impl C_SYNC_DATA {
    pub fn new() -> C_SYNC_DATA {
        ::std::default::Default::default()
    }

    // .protos.PlayerPt player_pt = 1;


    pub fn get_player_pt(&self) -> &super::base::PlayerPt {
        self.player_pt.as_ref().unwrap_or_else(|| <super::base::PlayerPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_player_pt(&mut self) {
        self.player_pt.clear();
    }

    pub fn has_player_pt(&self) -> bool {
        self.player_pt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_pt(&mut self, v: super::base::PlayerPt) {
        self.player_pt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player_pt(&mut self) -> &mut super::base::PlayerPt {
        if self.player_pt.is_none() {
            self.player_pt.set_default();
        }
        self.player_pt.as_mut().unwrap()
    }

    // Take field
    pub fn take_player_pt(&mut self) -> super::base::PlayerPt {
        self.player_pt.take().unwrap_or_else(|| super::base::PlayerPt::new())
    }

    // repeated .protos.ResourcesPt resp = 2;


    pub fn get_resp(&self) -> &[super::base::ResourcesPt] {
        &self.resp
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: ::protobuf::RepeatedField<super::base::ResourcesPt>) {
        self.resp = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resp(&mut self) -> &mut ::protobuf::RepeatedField<super::base::ResourcesPt> {
        &mut self.resp
    }

    // Take field
    pub fn take_resp(&mut self) -> ::protobuf::RepeatedField<super::base::ResourcesPt> {
        ::std::mem::replace(&mut self.resp, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for C_SYNC_DATA {
    fn is_initialized(&self) -> bool {
        for v in &self.player_pt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.player_pt)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.player_pt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.resp {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.player_pt.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.resp {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_SYNC_DATA {
        C_SYNC_DATA::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::PlayerPt>>(
                "player_pt",
                |m: &C_SYNC_DATA| { &m.player_pt },
                |m: &mut C_SYNC_DATA| { &mut m.player_pt },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::ResourcesPt>>(
                "resp",
                |m: &C_SYNC_DATA| { &m.resp },
                |m: &mut C_SYNC_DATA| { &mut m.resp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_SYNC_DATA>(
                "C_SYNC_DATA",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static C_SYNC_DATA {
        static instance: ::protobuf::rt::LazyV2<C_SYNC_DATA> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C_SYNC_DATA::new)
    }
}

impl ::protobuf::Clear for C_SYNC_DATA {
    fn clear(&mut self) {
        self.player_pt.clear();
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_SYNC_DATA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_SYNC_DATA {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_SYNC_DATA {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    pub sync_time: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_SYNC_DATA {
    fn default() -> &'a S_SYNC_DATA {
        <S_SYNC_DATA as ::protobuf::Message>::default_instance()
    }
}

impl S_SYNC_DATA {
    pub fn new() -> S_SYNC_DATA {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }

    // uint32 sync_time = 3;


    pub fn get_sync_time(&self) -> u32 {
        self.sync_time
    }
    pub fn clear_sync_time(&mut self) {
        self.sync_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_sync_time(&mut self, v: u32) {
        self.sync_time = v;
    }
}

impl ::protobuf::Message for S_SYNC_DATA {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sync_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        if self.sync_time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sync_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        if self.sync_time != 0 {
            os.write_uint32(3, self.sync_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_SYNC_DATA {
        S_SYNC_DATA::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_succ",
                |m: &S_SYNC_DATA| { &m.is_succ },
                |m: &mut S_SYNC_DATA| { &mut m.is_succ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "err_mess",
                |m: &S_SYNC_DATA| { &m.err_mess },
                |m: &mut S_SYNC_DATA| { &mut m.err_mess },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sync_time",
                |m: &S_SYNC_DATA| { &m.sync_time },
                |m: &mut S_SYNC_DATA| { &mut m.sync_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_SYNC_DATA>(
                "S_SYNC_DATA",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_SYNC_DATA {
        static instance: ::protobuf::rt::LazyV2<S_SYNC_DATA> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_SYNC_DATA::new)
    }
}

impl ::protobuf::Clear for S_SYNC_DATA {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.sync_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_SYNC_DATA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_SYNC_DATA {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_MODIFY_NICK_NAME {
    // message fields
    pub nick_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_MODIFY_NICK_NAME {
    fn default() -> &'a C_MODIFY_NICK_NAME {
        <C_MODIFY_NICK_NAME as ::protobuf::Message>::default_instance()
    }
}

impl C_MODIFY_NICK_NAME {
    pub fn new() -> C_MODIFY_NICK_NAME {
        ::std::default::Default::default()
    }

    // string nick_name = 1;


    pub fn get_nick_name(&self) -> &str {
        &self.nick_name
    }
    pub fn clear_nick_name(&mut self) {
        self.nick_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_nick_name(&mut self, v: ::std::string::String) {
        self.nick_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nick_name(&mut self) -> &mut ::std::string::String {
        &mut self.nick_name
    }

    // Take field
    pub fn take_nick_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nick_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for C_MODIFY_NICK_NAME {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nick_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.nick_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.nick_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.nick_name.is_empty() {
            os.write_string(1, &self.nick_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_MODIFY_NICK_NAME {
        C_MODIFY_NICK_NAME::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nick_name",
                |m: &C_MODIFY_NICK_NAME| { &m.nick_name },
                |m: &mut C_MODIFY_NICK_NAME| { &mut m.nick_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_MODIFY_NICK_NAME>(
                "C_MODIFY_NICK_NAME",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static C_MODIFY_NICK_NAME {
        static instance: ::protobuf::rt::LazyV2<C_MODIFY_NICK_NAME> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C_MODIFY_NICK_NAME::new)
    }
}

impl ::protobuf::Clear for C_MODIFY_NICK_NAME {
    fn clear(&mut self) {
        self.nick_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_MODIFY_NICK_NAME {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_MODIFY_NICK_NAME {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_MODIFY_NICK_NAME {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_MODIFY_NICK_NAME {
    fn default() -> &'a S_MODIFY_NICK_NAME {
        <S_MODIFY_NICK_NAME as ::protobuf::Message>::default_instance()
    }
}

impl S_MODIFY_NICK_NAME {
    pub fn new() -> S_MODIFY_NICK_NAME {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_MODIFY_NICK_NAME {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_MODIFY_NICK_NAME {
        S_MODIFY_NICK_NAME::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_succ",
                |m: &S_MODIFY_NICK_NAME| { &m.is_succ },
                |m: &mut S_MODIFY_NICK_NAME| { &mut m.is_succ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "err_mess",
                |m: &S_MODIFY_NICK_NAME| { &m.err_mess },
                |m: &mut S_MODIFY_NICK_NAME| { &mut m.err_mess },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_MODIFY_NICK_NAME>(
                "S_MODIFY_NICK_NAME",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_MODIFY_NICK_NAME {
        static instance: ::protobuf::rt::LazyV2<S_MODIFY_NICK_NAME> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_MODIFY_NICK_NAME::new)
    }
}

impl ::protobuf::Clear for S_MODIFY_NICK_NAME {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_MODIFY_NICK_NAME {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_MODIFY_NICK_NAME {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_SHOW_RANK {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_SHOW_RANK {
    fn default() -> &'a C_SHOW_RANK {
        <C_SHOW_RANK as ::protobuf::Message>::default_instance()
    }
}

impl C_SHOW_RANK {
    pub fn new() -> C_SHOW_RANK {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for C_SHOW_RANK {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_SHOW_RANK {
        C_SHOW_RANK::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_SHOW_RANK>(
                "C_SHOW_RANK",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static C_SHOW_RANK {
        static instance: ::protobuf::rt::LazyV2<C_SHOW_RANK> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C_SHOW_RANK::new)
    }
}

impl ::protobuf::Clear for C_SHOW_RANK {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_SHOW_RANK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_SHOW_RANK {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_SHOW_RANK {
    // message fields
    pub self_rank: ::protobuf::SingularPtrField<super::base::RankInfoPt>,
    pub ranks: ::protobuf::RepeatedField<super::base::RankInfoPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_SHOW_RANK {
    fn default() -> &'a S_SHOW_RANK {
        <S_SHOW_RANK as ::protobuf::Message>::default_instance()
    }
}

impl S_SHOW_RANK {
    pub fn new() -> S_SHOW_RANK {
        ::std::default::Default::default()
    }

    // .protos.RankInfoPt self_rank = 1;


    pub fn get_self_rank(&self) -> &super::base::RankInfoPt {
        self.self_rank.as_ref().unwrap_or_else(|| <super::base::RankInfoPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_self_rank(&mut self) {
        self.self_rank.clear();
    }

    pub fn has_self_rank(&self) -> bool {
        self.self_rank.is_some()
    }

    // Param is passed by value, moved
    pub fn set_self_rank(&mut self, v: super::base::RankInfoPt) {
        self.self_rank = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_self_rank(&mut self) -> &mut super::base::RankInfoPt {
        if self.self_rank.is_none() {
            self.self_rank.set_default();
        }
        self.self_rank.as_mut().unwrap()
    }

    // Take field
    pub fn take_self_rank(&mut self) -> super::base::RankInfoPt {
        self.self_rank.take().unwrap_or_else(|| super::base::RankInfoPt::new())
    }

    // repeated .protos.RankInfoPt ranks = 2;


    pub fn get_ranks(&self) -> &[super::base::RankInfoPt] {
        &self.ranks
    }
    pub fn clear_ranks(&mut self) {
        self.ranks.clear();
    }

    // Param is passed by value, moved
    pub fn set_ranks(&mut self, v: ::protobuf::RepeatedField<super::base::RankInfoPt>) {
        self.ranks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ranks(&mut self) -> &mut ::protobuf::RepeatedField<super::base::RankInfoPt> {
        &mut self.ranks
    }

    // Take field
    pub fn take_ranks(&mut self) -> ::protobuf::RepeatedField<super::base::RankInfoPt> {
        ::std::mem::replace(&mut self.ranks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for S_SHOW_RANK {
    fn is_initialized(&self) -> bool {
        for v in &self.self_rank {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ranks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.self_rank)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ranks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.self_rank.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.ranks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.self_rank.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.ranks {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_SHOW_RANK {
        S_SHOW_RANK::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RankInfoPt>>(
                "self_rank",
                |m: &S_SHOW_RANK| { &m.self_rank },
                |m: &mut S_SHOW_RANK| { &mut m.self_rank },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RankInfoPt>>(
                "ranks",
                |m: &S_SHOW_RANK| { &m.ranks },
                |m: &mut S_SHOW_RANK| { &mut m.ranks },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_SHOW_RANK>(
                "S_SHOW_RANK",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_SHOW_RANK {
        static instance: ::protobuf::rt::LazyV2<S_SHOW_RANK> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_SHOW_RANK::new)
    }
}

impl ::protobuf::Clear for S_SHOW_RANK {
    fn clear(&mut self) {
        self.self_rank.clear();
        self.ranks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_SHOW_RANK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_SHOW_RANK {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_MODIFY_GRADE_FRAME_AND_SOUL {
    // message fields
    pub soul: u32,
    pub grade_frame: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_MODIFY_GRADE_FRAME_AND_SOUL {
    fn default() -> &'a C_MODIFY_GRADE_FRAME_AND_SOUL {
        <C_MODIFY_GRADE_FRAME_AND_SOUL as ::protobuf::Message>::default_instance()
    }
}

impl C_MODIFY_GRADE_FRAME_AND_SOUL {
    pub fn new() -> C_MODIFY_GRADE_FRAME_AND_SOUL {
        ::std::default::Default::default()
    }

    // uint32 soul = 1;


    pub fn get_soul(&self) -> u32 {
        self.soul
    }
    pub fn clear_soul(&mut self) {
        self.soul = 0;
    }

    // Param is passed by value, moved
    pub fn set_soul(&mut self, v: u32) {
        self.soul = v;
    }

    // uint32 grade_frame = 2;


    pub fn get_grade_frame(&self) -> u32 {
        self.grade_frame
    }
    pub fn clear_grade_frame(&mut self) {
        self.grade_frame = 0;
    }

    // Param is passed by value, moved
    pub fn set_grade_frame(&mut self, v: u32) {
        self.grade_frame = v;
    }
}

impl ::protobuf::Message for C_MODIFY_GRADE_FRAME_AND_SOUL {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.soul = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.grade_frame = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.soul != 0 {
            my_size += ::protobuf::rt::value_size(1, self.soul, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.grade_frame != 0 {
            my_size += ::protobuf::rt::value_size(2, self.grade_frame, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.soul != 0 {
            os.write_uint32(1, self.soul)?;
        }
        if self.grade_frame != 0 {
            os.write_uint32(2, self.grade_frame)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_MODIFY_GRADE_FRAME_AND_SOUL {
        C_MODIFY_GRADE_FRAME_AND_SOUL::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "soul",
                |m: &C_MODIFY_GRADE_FRAME_AND_SOUL| { &m.soul },
                |m: &mut C_MODIFY_GRADE_FRAME_AND_SOUL| { &mut m.soul },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "grade_frame",
                |m: &C_MODIFY_GRADE_FRAME_AND_SOUL| { &m.grade_frame },
                |m: &mut C_MODIFY_GRADE_FRAME_AND_SOUL| { &mut m.grade_frame },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_MODIFY_GRADE_FRAME_AND_SOUL>(
                "C_MODIFY_GRADE_FRAME_AND_SOUL",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static C_MODIFY_GRADE_FRAME_AND_SOUL {
        static instance: ::protobuf::rt::LazyV2<C_MODIFY_GRADE_FRAME_AND_SOUL> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C_MODIFY_GRADE_FRAME_AND_SOUL::new)
    }
}

impl ::protobuf::Clear for C_MODIFY_GRADE_FRAME_AND_SOUL {
    fn clear(&mut self) {
        self.soul = 0;
        self.grade_frame = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_MODIFY_GRADE_FRAME_AND_SOUL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_MODIFY_GRADE_FRAME_AND_SOUL {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_MODIFY_GRADE_FRAME_AND_SOUL {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_MODIFY_GRADE_FRAME_AND_SOUL {
    fn default() -> &'a S_MODIFY_GRADE_FRAME_AND_SOUL {
        <S_MODIFY_GRADE_FRAME_AND_SOUL as ::protobuf::Message>::default_instance()
    }
}

impl S_MODIFY_GRADE_FRAME_AND_SOUL {
    pub fn new() -> S_MODIFY_GRADE_FRAME_AND_SOUL {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_MODIFY_GRADE_FRAME_AND_SOUL {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_MODIFY_GRADE_FRAME_AND_SOUL {
        S_MODIFY_GRADE_FRAME_AND_SOUL::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_succ",
                |m: &S_MODIFY_GRADE_FRAME_AND_SOUL| { &m.is_succ },
                |m: &mut S_MODIFY_GRADE_FRAME_AND_SOUL| { &mut m.is_succ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "err_mess",
                |m: &S_MODIFY_GRADE_FRAME_AND_SOUL| { &m.err_mess },
                |m: &mut S_MODIFY_GRADE_FRAME_AND_SOUL| { &mut m.err_mess },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_MODIFY_GRADE_FRAME_AND_SOUL>(
                "S_MODIFY_GRADE_FRAME_AND_SOUL",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_MODIFY_GRADE_FRAME_AND_SOUL {
        static instance: ::protobuf::rt::LazyV2<S_MODIFY_GRADE_FRAME_AND_SOUL> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_MODIFY_GRADE_FRAME_AND_SOUL::new)
    }
}

impl ::protobuf::Clear for S_MODIFY_GRADE_FRAME_AND_SOUL {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_MODIFY_GRADE_FRAME_AND_SOUL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_MODIFY_GRADE_FRAME_AND_SOUL {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eprotocol.proto\x12\x06protos\x1a\nbase.proto\"'\n\x0cC_USER_LOGIN\
    \x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\"\xed\x02\n\x0cS_USE\
    R_LOGIN\x12\x17\n\x07is_succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\
    \x08err_mess\x18\x02\x20\x01(\tR\x07errMess\x12\x1b\n\tsync_time\x18\x03\
    \x20\x01(\rR\x08syncTime\x12&\n\x0flast_login_time\x18\x04\x20\x01(\rR\r\
    lastLoginTime\x12(\n\x10last_logoff_time\x18\x05\x20\x01(\rR\x0elastLogo\
    ffTime\x12-\n\tplayer_pt\x18\x06\x20\x01(\x0b2\x10.protos.PlayerPtR\x08p\
    layerPt\x12'\n\x04resp\x18\x07\x20\x03(\x0b2\x13.protos.ResourcesPtR\x04\
    resp\x12)\n\x05cters\x18\x08\x20\x03(\x0b2\x13.protos.CharacterPtR\x05ct\
    ers\x12!\n\x0cgrade_frames\x18\t\x20\x03(\rR\x0bgradeFrames\x12\x14\n\
    \x05souls\x18\n\x20\x03(\rR\x05souls\"'\n\nHEART_BEAT\x12\x19\n\x08sys_t\
    ime\x18\x01\x20\x01(\x04R\x07sysTime\"e\n\x0bC_SYNC_DATA\x12-\n\tplayer_\
    pt\x18\x01\x20\x01(\x0b2\x10.protos.PlayerPtR\x08playerPt\x12'\n\x04resp\
    \x18\x02\x20\x03(\x0b2\x13.protos.ResourcesPtR\x04resp\"^\n\x0bS_SYNC_DA\
    TA\x12\x17\n\x07is_succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err\
    _mess\x18\x02\x20\x01(\tR\x07errMess\x12\x1b\n\tsync_time\x18\x03\x20\
    \x01(\rR\x08syncTime\"1\n\x12C_MODIFY_NICK_NAME\x12\x1b\n\tnick_name\x18\
    \x01\x20\x01(\tR\x08nickName\"H\n\x12S_MODIFY_NICK_NAME\x12\x17\n\x07is_\
    succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_mess\x18\x02\x20\
    \x01(\tR\x07errMess\"\r\n\x0bC_SHOW_RANK\"h\n\x0bS_SHOW_RANK\x12/\n\tsel\
    f_rank\x18\x01\x20\x01(\x0b2\x12.protos.RankInfoPtR\x08selfRank\x12(\n\
    \x05ranks\x18\x02\x20\x03(\x0b2\x12.protos.RankInfoPtR\x05ranks\"T\n\x1d\
    C_MODIFY_GRADE_FRAME_AND_SOUL\x12\x12\n\x04soul\x18\x01\x20\x01(\rR\x04s\
    oul\x12\x1f\n\x0bgrade_frame\x18\x02\x20\x01(\rR\ngradeFrame\"S\n\x1dS_M\
    ODIFY_GRADE_FRAME_AND_SOUL\x12\x17\n\x07is_succ\x18\x01\x20\x01(\x08R\
    \x06isSucc\x12\x19\n\x08err_mess\x18\x02\x20\x01(\tR\x07errMessb\x06prot\
    o3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
