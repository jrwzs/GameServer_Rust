// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `robot.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct RobotPt {
    // message fields
    pub robot_id: u32,
    pub nick_name: ::std::string::String,
    pub cter: ::protobuf::SingularPtrField<super::base::BattleCharacterPt>,
    pub state: u32,
    pub team_id: u32,
    pub join_time: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RobotPt {
    fn default() -> &'a RobotPt {
        <RobotPt as ::protobuf::Message>::default_instance()
    }
}

impl RobotPt {
    pub fn new() -> RobotPt {
        ::std::default::Default::default()
    }

    // uint32 robot_id = 1;


    pub fn get_robot_id(&self) -> u32 {
        self.robot_id
    }
    pub fn clear_robot_id(&mut self) {
        self.robot_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_robot_id(&mut self, v: u32) {
        self.robot_id = v;
    }

    // string nick_name = 2;


    pub fn get_nick_name(&self) -> &str {
        &self.nick_name
    }
    pub fn clear_nick_name(&mut self) {
        self.nick_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_nick_name(&mut self, v: ::std::string::String) {
        self.nick_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nick_name(&mut self) -> &mut ::std::string::String {
        &mut self.nick_name
    }

    // Take field
    pub fn take_nick_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nick_name, ::std::string::String::new())
    }

    // .protos.BattleCharacterPt cter = 3;


    pub fn get_cter(&self) -> &super::base::BattleCharacterPt {
        self.cter.as_ref().unwrap_or_else(|| <super::base::BattleCharacterPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cter(&mut self) {
        self.cter.clear();
    }

    pub fn has_cter(&self) -> bool {
        self.cter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cter(&mut self, v: super::base::BattleCharacterPt) {
        self.cter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cter(&mut self) -> &mut super::base::BattleCharacterPt {
        if self.cter.is_none() {
            self.cter.set_default();
        }
        self.cter.as_mut().unwrap()
    }

    // Take field
    pub fn take_cter(&mut self) -> super::base::BattleCharacterPt {
        self.cter.take().unwrap_or_else(|| super::base::BattleCharacterPt::new())
    }

    // uint32 state = 4;


    pub fn get_state(&self) -> u32 {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = 0;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: u32) {
        self.state = v;
    }

    // uint32 team_id = 5;


    pub fn get_team_id(&self) -> u32 {
        self.team_id
    }
    pub fn clear_team_id(&mut self) {
        self.team_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = v;
    }

    // uint64 join_time = 6;


    pub fn get_join_time(&self) -> u64 {
        self.join_time
    }
    pub fn clear_join_time(&mut self) {
        self.join_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_join_time(&mut self, v: u64) {
        self.join_time = v;
    }
}

impl ::protobuf::Message for RobotPt {
    fn is_initialized(&self) -> bool {
        for v in &self.cter {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.robot_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nick_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cter)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.state = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.team_id = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.join_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.robot_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.robot_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.nick_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nick_name);
        }
        if let Some(ref v) = self.cter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.state != 0 {
            my_size += ::protobuf::rt::value_size(4, self.state, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.team_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.team_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.join_time != 0 {
            my_size += ::protobuf::rt::value_size(6, self.join_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.robot_id != 0 {
            os.write_uint32(1, self.robot_id)?;
        }
        if !self.nick_name.is_empty() {
            os.write_string(2, &self.nick_name)?;
        }
        if let Some(ref v) = self.cter.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.state != 0 {
            os.write_uint32(4, self.state)?;
        }
        if self.team_id != 0 {
            os.write_uint32(5, self.team_id)?;
        }
        if self.join_time != 0 {
            os.write_uint64(6, self.join_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RobotPt {
        RobotPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "robot_id",
                |m: &RobotPt| { &m.robot_id },
                |m: &mut RobotPt| { &mut m.robot_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nick_name",
                |m: &RobotPt| { &m.nick_name },
                |m: &mut RobotPt| { &mut m.nick_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::BattleCharacterPt>>(
                "cter",
                |m: &RobotPt| { &m.cter },
                |m: &mut RobotPt| { &mut m.cter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "state",
                |m: &RobotPt| { &m.state },
                |m: &mut RobotPt| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "team_id",
                |m: &RobotPt| { &m.team_id },
                |m: &mut RobotPt| { &mut m.team_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "join_time",
                |m: &RobotPt| { &m.join_time },
                |m: &mut RobotPt| { &mut m.join_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RobotPt>(
                "RobotPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RobotPt {
        static instance: ::protobuf::rt::LazyV2<RobotPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RobotPt::new)
    }
}

impl ::protobuf::Clear for RobotPt {
    fn clear(&mut self) {
        self.robot_id = 0;
        self.nick_name.clear();
        self.cter.clear();
        self.state = 0;
        self.team_id = 0;
        self.join_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RobotPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RobotPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RobotRoomPt {
    // message fields
    pub room_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RobotRoomPt {
    fn default() -> &'a RobotRoomPt {
        <RobotRoomPt as ::protobuf::Message>::default_instance()
    }
}

impl RobotRoomPt {
    pub fn new() -> RobotRoomPt {
        ::std::default::Default::default()
    }

    // uint64 room_id = 1;


    pub fn get_room_id(&self) -> u64 {
        self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: u64) {
        self.room_id = v;
    }
}

impl ::protobuf::Message for RobotRoomPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.room_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_id != 0 {
            os.write_uint64(1, self.room_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RobotRoomPt {
        RobotRoomPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "room_id",
                |m: &RobotRoomPt| { &m.room_id },
                |m: &mut RobotRoomPt| { &mut m.room_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RobotRoomPt>(
                "RobotRoomPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RobotRoomPt {
        static instance: ::protobuf::rt::LazyV2<RobotRoomPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RobotRoomPt::new)
    }
}

impl ::protobuf::Clear for RobotRoomPt {
    fn clear(&mut self) {
        self.room_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RobotRoomPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RobotRoomPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_REQUEST_ROBOT {
    // message fields
    pub room_id: u64,
    pub need_index: ::std::vec::Vec<u32>,
    pub already_cter: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_REQUEST_ROBOT {
    fn default() -> &'a C_REQUEST_ROBOT {
        <C_REQUEST_ROBOT as ::protobuf::Message>::default_instance()
    }
}

impl C_REQUEST_ROBOT {
    pub fn new() -> C_REQUEST_ROBOT {
        ::std::default::Default::default()
    }

    // uint64 room_id = 1;


    pub fn get_room_id(&self) -> u64 {
        self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: u64) {
        self.room_id = v;
    }

    // repeated uint32 need_index = 2;


    pub fn get_need_index(&self) -> &[u32] {
        &self.need_index
    }
    pub fn clear_need_index(&mut self) {
        self.need_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_need_index(&mut self, v: ::std::vec::Vec<u32>) {
        self.need_index = v;
    }

    // Mutable pointer to the field.
    pub fn mut_need_index(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.need_index
    }

    // Take field
    pub fn take_need_index(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.need_index, ::std::vec::Vec::new())
    }

    // repeated uint32 already_cter = 3;


    pub fn get_already_cter(&self) -> &[u32] {
        &self.already_cter
    }
    pub fn clear_already_cter(&mut self) {
        self.already_cter.clear();
    }

    // Param is passed by value, moved
    pub fn set_already_cter(&mut self, v: ::std::vec::Vec<u32>) {
        self.already_cter = v;
    }

    // Mutable pointer to the field.
    pub fn mut_already_cter(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.already_cter
    }

    // Take field
    pub fn take_already_cter(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.already_cter, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for C_REQUEST_ROBOT {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.room_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.need_index)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.already_cter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.need_index {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.already_cter {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_id != 0 {
            os.write_uint64(1, self.room_id)?;
        }
        for v in &self.need_index {
            os.write_uint32(2, *v)?;
        };
        for v in &self.already_cter {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_REQUEST_ROBOT {
        C_REQUEST_ROBOT::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "room_id",
                |m: &C_REQUEST_ROBOT| { &m.room_id },
                |m: &mut C_REQUEST_ROBOT| { &mut m.room_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "need_index",
                |m: &C_REQUEST_ROBOT| { &m.need_index },
                |m: &mut C_REQUEST_ROBOT| { &mut m.need_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "already_cter",
                |m: &C_REQUEST_ROBOT| { &m.already_cter },
                |m: &mut C_REQUEST_ROBOT| { &mut m.already_cter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_REQUEST_ROBOT>(
                "C_REQUEST_ROBOT",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static C_REQUEST_ROBOT {
        static instance: ::protobuf::rt::LazyV2<C_REQUEST_ROBOT> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C_REQUEST_ROBOT::new)
    }
}

impl ::protobuf::Clear for C_REQUEST_ROBOT {
    fn clear(&mut self) {
        self.room_id = 0;
        self.need_index.clear();
        self.already_cter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_REQUEST_ROBOT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_REQUEST_ROBOT {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_REQUEST_ROBOT {
    // message fields
    pub robots: ::protobuf::RepeatedField<RobotPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_REQUEST_ROBOT {
    fn default() -> &'a S_REQUEST_ROBOT {
        <S_REQUEST_ROBOT as ::protobuf::Message>::default_instance()
    }
}

impl S_REQUEST_ROBOT {
    pub fn new() -> S_REQUEST_ROBOT {
        ::std::default::Default::default()
    }

    // repeated .protos.RobotPt robots = 2;


    pub fn get_robots(&self) -> &[RobotPt] {
        &self.robots
    }
    pub fn clear_robots(&mut self) {
        self.robots.clear();
    }

    // Param is passed by value, moved
    pub fn set_robots(&mut self, v: ::protobuf::RepeatedField<RobotPt>) {
        self.robots = v;
    }

    // Mutable pointer to the field.
    pub fn mut_robots(&mut self) -> &mut ::protobuf::RepeatedField<RobotPt> {
        &mut self.robots
    }

    // Take field
    pub fn take_robots(&mut self) -> ::protobuf::RepeatedField<RobotPt> {
        ::std::mem::replace(&mut self.robots, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for S_REQUEST_ROBOT {
    fn is_initialized(&self) -> bool {
        for v in &self.robots {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.robots)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.robots {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.robots {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_REQUEST_ROBOT {
        S_REQUEST_ROBOT::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RobotPt>>(
                "robots",
                |m: &S_REQUEST_ROBOT| { &m.robots },
                |m: &mut S_REQUEST_ROBOT| { &mut m.robots },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_REQUEST_ROBOT>(
                "S_REQUEST_ROBOT",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static S_REQUEST_ROBOT {
        static instance: ::protobuf::rt::LazyV2<S_REQUEST_ROBOT> = ::protobuf::rt::LazyV2::INIT;
        instance.get(S_REQUEST_ROBOT::new)
    }
}

impl ::protobuf::Clear for S_REQUEST_ROBOT {
    fn clear(&mut self) {
        self.robots.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_REQUEST_ROBOT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_REQUEST_ROBOT {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0brobot.proto\x12\x06protos\x1a\nbase.proto\"\xbc\x01\n\x07RobotPt\
    \x12\x19\n\x08robot_id\x18\x01\x20\x01(\rR\x07robotId\x12\x1b\n\tnick_na\
    me\x18\x02\x20\x01(\tR\x08nickName\x12-\n\x04cter\x18\x03\x20\x01(\x0b2\
    \x19.protos.BattleCharacterPtR\x04cter\x12\x14\n\x05state\x18\x04\x20\
    \x01(\rR\x05state\x12\x17\n\x07team_id\x18\x05\x20\x01(\rR\x06teamId\x12\
    \x1b\n\tjoin_time\x18\x06\x20\x01(\x04R\x08joinTime\"&\n\x0bRobotRoomPt\
    \x12\x17\n\x07room_id\x18\x01\x20\x01(\x04R\x06roomId\"l\n\x0fC_REQUEST_\
    ROBOT\x12\x17\n\x07room_id\x18\x01\x20\x01(\x04R\x06roomId\x12\x1d\n\nne\
    ed_index\x18\x02\x20\x03(\rR\tneedIndex\x12!\n\x0calready_cter\x18\x03\
    \x20\x03(\rR\x0balreadyCter\":\n\x0fS_REQUEST_ROBOT\x12'\n\x06robots\x18\
    \x02\x20\x03(\x0b2\x0f.protos.RobotPtR\x06robotsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
