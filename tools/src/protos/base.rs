// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `base.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

#[derive(PartialEq,Clone,Default)]
pub struct RoomSettingPt {
    // message fields
    pub turn_limit_time: u32,
    pub season_id: u32,
    pub is_open_ai: bool,
    pub victory_condition: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RoomSettingPt {
    fn default() -> &'a RoomSettingPt {
        <RoomSettingPt as ::protobuf::Message>::default_instance()
    }
}

impl RoomSettingPt {
    pub fn new() -> RoomSettingPt {
        ::std::default::Default::default()
    }

    // uint32 turn_limit_time = 1;


    pub fn get_turn_limit_time(&self) -> u32 {
        self.turn_limit_time
    }
    pub fn clear_turn_limit_time(&mut self) {
        self.turn_limit_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_turn_limit_time(&mut self, v: u32) {
        self.turn_limit_time = v;
    }

    // uint32 season_id = 2;


    pub fn get_season_id(&self) -> u32 {
        self.season_id
    }
    pub fn clear_season_id(&mut self) {
        self.season_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_season_id(&mut self, v: u32) {
        self.season_id = v;
    }

    // bool is_open_ai = 3;


    pub fn get_is_open_ai(&self) -> bool {
        self.is_open_ai
    }
    pub fn clear_is_open_ai(&mut self) {
        self.is_open_ai = false;
    }

    // Param is passed by value, moved
    pub fn set_is_open_ai(&mut self, v: bool) {
        self.is_open_ai = v;
    }

    // uint32 victory_condition = 4;


    pub fn get_victory_condition(&self) -> u32 {
        self.victory_condition
    }
    pub fn clear_victory_condition(&mut self) {
        self.victory_condition = 0;
    }

    // Param is passed by value, moved
    pub fn set_victory_condition(&mut self, v: u32) {
        self.victory_condition = v;
    }
}

impl ::protobuf::Message for RoomSettingPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.turn_limit_time = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.season_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_open_ai = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.victory_condition = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.turn_limit_time != 0 {
            my_size += ::protobuf::rt::value_size(1, self.turn_limit_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.season_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.season_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_open_ai != false {
            my_size += 2;
        }
        if self.victory_condition != 0 {
            my_size += ::protobuf::rt::value_size(4, self.victory_condition, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.turn_limit_time != 0 {
            os.write_uint32(1, self.turn_limit_time)?;
        }
        if self.season_id != 0 {
            os.write_uint32(2, self.season_id)?;
        }
        if self.is_open_ai != false {
            os.write_bool(3, self.is_open_ai)?;
        }
        if self.victory_condition != 0 {
            os.write_uint32(4, self.victory_condition)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoomSettingPt {
        RoomSettingPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "turn_limit_time",
                |m: &RoomSettingPt| { &m.turn_limit_time },
                |m: &mut RoomSettingPt| { &mut m.turn_limit_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "season_id",
                |m: &RoomSettingPt| { &m.season_id },
                |m: &mut RoomSettingPt| { &mut m.season_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_open_ai",
                |m: &RoomSettingPt| { &m.is_open_ai },
                |m: &mut RoomSettingPt| { &mut m.is_open_ai },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "victory_condition",
                |m: &RoomSettingPt| { &m.victory_condition },
                |m: &mut RoomSettingPt| { &mut m.victory_condition },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RoomSettingPt>(
                "RoomSettingPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RoomSettingPt {
        static instance: ::protobuf::rt::LazyV2<RoomSettingPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RoomSettingPt::new)
    }
}

impl ::protobuf::Clear for RoomSettingPt {
    fn clear(&mut self) {
        self.turn_limit_time = 0;
        self.season_id = 0;
        self.is_open_ai = false;
        self.victory_condition = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoomSettingPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoomSettingPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerPt {
    // message fields
    pub nick_name: ::std::string::String,
    pub last_character: u32,
    pub punish_match: ::protobuf::SingularPtrField<PunishMatchPt>,
    pub grade: u32,
    pub grade_frame: u32,
    pub soul: u32,
    pub best_rank: i32,
    pub league: ::protobuf::SingularPtrField<LeaguePt>,
    pub dlc: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerPt {
    fn default() -> &'a PlayerPt {
        <PlayerPt as ::protobuf::Message>::default_instance()
    }
}

impl PlayerPt {
    pub fn new() -> PlayerPt {
        ::std::default::Default::default()
    }

    // string nick_name = 1;


    pub fn get_nick_name(&self) -> &str {
        &self.nick_name
    }
    pub fn clear_nick_name(&mut self) {
        self.nick_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_nick_name(&mut self, v: ::std::string::String) {
        self.nick_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nick_name(&mut self) -> &mut ::std::string::String {
        &mut self.nick_name
    }

    // Take field
    pub fn take_nick_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nick_name, ::std::string::String::new())
    }

    // uint32 last_character = 2;


    pub fn get_last_character(&self) -> u32 {
        self.last_character
    }
    pub fn clear_last_character(&mut self) {
        self.last_character = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_character(&mut self, v: u32) {
        self.last_character = v;
    }

    // .protos.PunishMatchPt punish_match = 3;


    pub fn get_punish_match(&self) -> &PunishMatchPt {
        self.punish_match.as_ref().unwrap_or_else(|| <PunishMatchPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_punish_match(&mut self) {
        self.punish_match.clear();
    }

    pub fn has_punish_match(&self) -> bool {
        self.punish_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_punish_match(&mut self, v: PunishMatchPt) {
        self.punish_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_punish_match(&mut self) -> &mut PunishMatchPt {
        if self.punish_match.is_none() {
            self.punish_match.set_default();
        }
        self.punish_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_punish_match(&mut self) -> PunishMatchPt {
        self.punish_match.take().unwrap_or_else(|| PunishMatchPt::new())
    }

    // uint32 grade = 4;


    pub fn get_grade(&self) -> u32 {
        self.grade
    }
    pub fn clear_grade(&mut self) {
        self.grade = 0;
    }

    // Param is passed by value, moved
    pub fn set_grade(&mut self, v: u32) {
        self.grade = v;
    }

    // uint32 grade_frame = 5;


    pub fn get_grade_frame(&self) -> u32 {
        self.grade_frame
    }
    pub fn clear_grade_frame(&mut self) {
        self.grade_frame = 0;
    }

    // Param is passed by value, moved
    pub fn set_grade_frame(&mut self, v: u32) {
        self.grade_frame = v;
    }

    // uint32 soul = 6;


    pub fn get_soul(&self) -> u32 {
        self.soul
    }
    pub fn clear_soul(&mut self) {
        self.soul = 0;
    }

    // Param is passed by value, moved
    pub fn set_soul(&mut self, v: u32) {
        self.soul = v;
    }

    // int32 best_rank = 7;


    pub fn get_best_rank(&self) -> i32 {
        self.best_rank
    }
    pub fn clear_best_rank(&mut self) {
        self.best_rank = 0;
    }

    // Param is passed by value, moved
    pub fn set_best_rank(&mut self, v: i32) {
        self.best_rank = v;
    }

    // .protos.LeaguePt league = 8;


    pub fn get_league(&self) -> &LeaguePt {
        self.league.as_ref().unwrap_or_else(|| <LeaguePt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_league(&mut self) {
        self.league.clear();
    }

    pub fn has_league(&self) -> bool {
        self.league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league(&mut self, v: LeaguePt) {
        self.league = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_league(&mut self) -> &mut LeaguePt {
        if self.league.is_none() {
            self.league.set_default();
        }
        self.league.as_mut().unwrap()
    }

    // Take field
    pub fn take_league(&mut self) -> LeaguePt {
        self.league.take().unwrap_or_else(|| LeaguePt::new())
    }

    // repeated uint32 dlc = 9;


    pub fn get_dlc(&self) -> &[u32] {
        &self.dlc
    }
    pub fn clear_dlc(&mut self) {
        self.dlc.clear();
    }

    // Param is passed by value, moved
    pub fn set_dlc(&mut self, v: ::std::vec::Vec<u32>) {
        self.dlc = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dlc(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.dlc
    }

    // Take field
    pub fn take_dlc(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.dlc, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PlayerPt {
    fn is_initialized(&self) -> bool {
        for v in &self.punish_match {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.league {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nick_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last_character = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.punish_match)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.grade = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.grade_frame = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.soul = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.best_rank = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.league)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.dlc)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.nick_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.nick_name);
        }
        if self.last_character != 0 {
            my_size += ::protobuf::rt::value_size(2, self.last_character, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.punish_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.grade != 0 {
            my_size += ::protobuf::rt::value_size(4, self.grade, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.grade_frame != 0 {
            my_size += ::protobuf::rt::value_size(5, self.grade_frame, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.soul != 0 {
            my_size += ::protobuf::rt::value_size(6, self.soul, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.best_rank != 0 {
            my_size += ::protobuf::rt::value_size(7, self.best_rank, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.league.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.dlc {
            my_size += ::protobuf::rt::value_size(9, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.nick_name.is_empty() {
            os.write_string(1, &self.nick_name)?;
        }
        if self.last_character != 0 {
            os.write_uint32(2, self.last_character)?;
        }
        if let Some(ref v) = self.punish_match.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.grade != 0 {
            os.write_uint32(4, self.grade)?;
        }
        if self.grade_frame != 0 {
            os.write_uint32(5, self.grade_frame)?;
        }
        if self.soul != 0 {
            os.write_uint32(6, self.soul)?;
        }
        if self.best_rank != 0 {
            os.write_int32(7, self.best_rank)?;
        }
        if let Some(ref v) = self.league.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.dlc {
            os.write_uint32(9, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerPt {
        PlayerPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nick_name",
                |m: &PlayerPt| { &m.nick_name },
                |m: &mut PlayerPt| { &mut m.nick_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "last_character",
                |m: &PlayerPt| { &m.last_character },
                |m: &mut PlayerPt| { &mut m.last_character },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PunishMatchPt>>(
                "punish_match",
                |m: &PlayerPt| { &m.punish_match },
                |m: &mut PlayerPt| { &mut m.punish_match },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "grade",
                |m: &PlayerPt| { &m.grade },
                |m: &mut PlayerPt| { &mut m.grade },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "grade_frame",
                |m: &PlayerPt| { &m.grade_frame },
                |m: &mut PlayerPt| { &mut m.grade_frame },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "soul",
                |m: &PlayerPt| { &m.soul },
                |m: &mut PlayerPt| { &mut m.soul },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "best_rank",
                |m: &PlayerPt| { &m.best_rank },
                |m: &mut PlayerPt| { &mut m.best_rank },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LeaguePt>>(
                "league",
                |m: &PlayerPt| { &m.league },
                |m: &mut PlayerPt| { &mut m.league },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "dlc",
                |m: &PlayerPt| { &m.dlc },
                |m: &mut PlayerPt| { &mut m.dlc },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerPt>(
                "PlayerPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlayerPt {
        static instance: ::protobuf::rt::LazyV2<PlayerPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlayerPt::new)
    }
}

impl ::protobuf::Clear for PlayerPt {
    fn clear(&mut self) {
        self.nick_name.clear();
        self.last_character = 0;
        self.punish_match.clear();
        self.grade = 0;
        self.grade_frame = 0;
        self.soul = 0;
        self.best_rank = 0;
        self.league.clear();
        self.dlc.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResourcesPt {
    // message fields
    pub field_type: u32,
    pub id: u32,
    pub num: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourcesPt {
    fn default() -> &'a ResourcesPt {
        <ResourcesPt as ::protobuf::Message>::default_instance()
    }
}

impl ResourcesPt {
    pub fn new() -> ResourcesPt {
        ::std::default::Default::default()
    }

    // uint32 type = 1;


    pub fn get_field_type(&self) -> u32 {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: u32) {
        self.field_type = v;
    }

    // uint32 id = 2;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // uint32 num = 3;


    pub fn get_num(&self) -> u32 {
        self.num
    }
    pub fn clear_num(&mut self) {
        self.num = 0;
    }

    // Param is passed by value, moved
    pub fn set_num(&mut self, v: u32) {
        self.num = v;
    }
}

impl ::protobuf::Message for ResourcesPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_type = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.field_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num != 0 {
            my_size += ::protobuf::rt::value_size(3, self.num, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != 0 {
            os.write_uint32(1, self.field_type)?;
        }
        if self.id != 0 {
            os.write_uint32(2, self.id)?;
        }
        if self.num != 0 {
            os.write_uint32(3, self.num)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourcesPt {
        ResourcesPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "type",
                |m: &ResourcesPt| { &m.field_type },
                |m: &mut ResourcesPt| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &ResourcesPt| { &m.id },
                |m: &mut ResourcesPt| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num",
                |m: &ResourcesPt| { &m.num },
                |m: &mut ResourcesPt| { &mut m.num },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourcesPt>(
                "ResourcesPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResourcesPt {
        static instance: ::protobuf::rt::LazyV2<ResourcesPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResourcesPt::new)
    }
}

impl ::protobuf::Clear for ResourcesPt {
    fn clear(&mut self) {
        self.field_type = 0;
        self.id = 0;
        self.num = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourcesPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourcesPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MemberPt {
    // message fields
    pub user_id: u32,
    pub nick_name: ::std::string::String,
    pub cter: ::protobuf::SingularPtrField<CharacterPt>,
    pub state: u32,
    pub grade: u32,
    pub grade_frame: u32,
    pub soul: u32,
    pub team_id: u32,
    pub join_time: u64,
    pub league: ::protobuf::SingularPtrField<LeaguePt>,
    pub is_robot: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MemberPt {
    fn default() -> &'a MemberPt {
        <MemberPt as ::protobuf::Message>::default_instance()
    }
}

impl MemberPt {
    pub fn new() -> MemberPt {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // string nick_name = 2;


    pub fn get_nick_name(&self) -> &str {
        &self.nick_name
    }
    pub fn clear_nick_name(&mut self) {
        self.nick_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_nick_name(&mut self, v: ::std::string::String) {
        self.nick_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nick_name(&mut self) -> &mut ::std::string::String {
        &mut self.nick_name
    }

    // Take field
    pub fn take_nick_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nick_name, ::std::string::String::new())
    }

    // .protos.CharacterPt cter = 3;


    pub fn get_cter(&self) -> &CharacterPt {
        self.cter.as_ref().unwrap_or_else(|| <CharacterPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cter(&mut self) {
        self.cter.clear();
    }

    pub fn has_cter(&self) -> bool {
        self.cter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cter(&mut self, v: CharacterPt) {
        self.cter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cter(&mut self) -> &mut CharacterPt {
        if self.cter.is_none() {
            self.cter.set_default();
        }
        self.cter.as_mut().unwrap()
    }

    // Take field
    pub fn take_cter(&mut self) -> CharacterPt {
        self.cter.take().unwrap_or_else(|| CharacterPt::new())
    }

    // uint32 state = 4;


    pub fn get_state(&self) -> u32 {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = 0;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: u32) {
        self.state = v;
    }

    // uint32 grade = 5;


    pub fn get_grade(&self) -> u32 {
        self.grade
    }
    pub fn clear_grade(&mut self) {
        self.grade = 0;
    }

    // Param is passed by value, moved
    pub fn set_grade(&mut self, v: u32) {
        self.grade = v;
    }

    // uint32 grade_frame = 6;


    pub fn get_grade_frame(&self) -> u32 {
        self.grade_frame
    }
    pub fn clear_grade_frame(&mut self) {
        self.grade_frame = 0;
    }

    // Param is passed by value, moved
    pub fn set_grade_frame(&mut self, v: u32) {
        self.grade_frame = v;
    }

    // uint32 soul = 7;


    pub fn get_soul(&self) -> u32 {
        self.soul
    }
    pub fn clear_soul(&mut self) {
        self.soul = 0;
    }

    // Param is passed by value, moved
    pub fn set_soul(&mut self, v: u32) {
        self.soul = v;
    }

    // uint32 team_id = 8;


    pub fn get_team_id(&self) -> u32 {
        self.team_id
    }
    pub fn clear_team_id(&mut self) {
        self.team_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = v;
    }

    // uint64 join_time = 9;


    pub fn get_join_time(&self) -> u64 {
        self.join_time
    }
    pub fn clear_join_time(&mut self) {
        self.join_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_join_time(&mut self, v: u64) {
        self.join_time = v;
    }

    // .protos.LeaguePt league = 10;


    pub fn get_league(&self) -> &LeaguePt {
        self.league.as_ref().unwrap_or_else(|| <LeaguePt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_league(&mut self) {
        self.league.clear();
    }

    pub fn has_league(&self) -> bool {
        self.league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league(&mut self, v: LeaguePt) {
        self.league = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_league(&mut self) -> &mut LeaguePt {
        if self.league.is_none() {
            self.league.set_default();
        }
        self.league.as_mut().unwrap()
    }

    // Take field
    pub fn take_league(&mut self) -> LeaguePt {
        self.league.take().unwrap_or_else(|| LeaguePt::new())
    }

    // bool is_robot = 11;


    pub fn get_is_robot(&self) -> bool {
        self.is_robot
    }
    pub fn clear_is_robot(&mut self) {
        self.is_robot = false;
    }

    // Param is passed by value, moved
    pub fn set_is_robot(&mut self, v: bool) {
        self.is_robot = v;
    }
}

impl ::protobuf::Message for MemberPt {
    fn is_initialized(&self) -> bool {
        for v in &self.cter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.league {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nick_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cter)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.state = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.grade = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.grade_frame = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.soul = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.team_id = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.join_time = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.league)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_robot = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.nick_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nick_name);
        }
        if let Some(ref v) = self.cter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.state != 0 {
            my_size += ::protobuf::rt::value_size(4, self.state, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.grade != 0 {
            my_size += ::protobuf::rt::value_size(5, self.grade, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.grade_frame != 0 {
            my_size += ::protobuf::rt::value_size(6, self.grade_frame, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.soul != 0 {
            my_size += ::protobuf::rt::value_size(7, self.soul, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.team_id != 0 {
            my_size += ::protobuf::rt::value_size(8, self.team_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.join_time != 0 {
            my_size += ::protobuf::rt::value_size(9, self.join_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.league.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.is_robot != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if !self.nick_name.is_empty() {
            os.write_string(2, &self.nick_name)?;
        }
        if let Some(ref v) = self.cter.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.state != 0 {
            os.write_uint32(4, self.state)?;
        }
        if self.grade != 0 {
            os.write_uint32(5, self.grade)?;
        }
        if self.grade_frame != 0 {
            os.write_uint32(6, self.grade_frame)?;
        }
        if self.soul != 0 {
            os.write_uint32(7, self.soul)?;
        }
        if self.team_id != 0 {
            os.write_uint32(8, self.team_id)?;
        }
        if self.join_time != 0 {
            os.write_uint64(9, self.join_time)?;
        }
        if let Some(ref v) = self.league.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.is_robot != false {
            os.write_bool(11, self.is_robot)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MemberPt {
        MemberPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &MemberPt| { &m.user_id },
                |m: &mut MemberPt| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nick_name",
                |m: &MemberPt| { &m.nick_name },
                |m: &mut MemberPt| { &mut m.nick_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CharacterPt>>(
                "cter",
                |m: &MemberPt| { &m.cter },
                |m: &mut MemberPt| { &mut m.cter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "state",
                |m: &MemberPt| { &m.state },
                |m: &mut MemberPt| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "grade",
                |m: &MemberPt| { &m.grade },
                |m: &mut MemberPt| { &mut m.grade },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "grade_frame",
                |m: &MemberPt| { &m.grade_frame },
                |m: &mut MemberPt| { &mut m.grade_frame },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "soul",
                |m: &MemberPt| { &m.soul },
                |m: &mut MemberPt| { &mut m.soul },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "team_id",
                |m: &MemberPt| { &m.team_id },
                |m: &mut MemberPt| { &mut m.team_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "join_time",
                |m: &MemberPt| { &m.join_time },
                |m: &mut MemberPt| { &mut m.join_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LeaguePt>>(
                "league",
                |m: &MemberPt| { &m.league },
                |m: &mut MemberPt| { &mut m.league },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_robot",
                |m: &MemberPt| { &m.is_robot },
                |m: &mut MemberPt| { &mut m.is_robot },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MemberPt>(
                "MemberPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MemberPt {
        static instance: ::protobuf::rt::LazyV2<MemberPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MemberPt::new)
    }
}

impl ::protobuf::Clear for MemberPt {
    fn clear(&mut self) {
        self.user_id = 0;
        self.nick_name.clear();
        self.cter.clear();
        self.state = 0;
        self.grade = 0;
        self.grade_frame = 0;
        self.soul = 0;
        self.team_id = 0;
        self.join_time = 0;
        self.league.clear();
        self.is_robot = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MemberPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MemberPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WorldCellPt {
    // message fields
    pub index: u32,
    pub world_cell_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WorldCellPt {
    fn default() -> &'a WorldCellPt {
        <WorldCellPt as ::protobuf::Message>::default_instance()
    }
}

impl WorldCellPt {
    pub fn new() -> WorldCellPt {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // uint32 world_cell_id = 2;


    pub fn get_world_cell_id(&self) -> u32 {
        self.world_cell_id
    }
    pub fn clear_world_cell_id(&mut self) {
        self.world_cell_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_world_cell_id(&mut self, v: u32) {
        self.world_cell_id = v;
    }
}

impl ::protobuf::Message for WorldCellPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.world_cell_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.world_cell_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.world_cell_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if self.world_cell_id != 0 {
            os.write_uint32(2, self.world_cell_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorldCellPt {
        WorldCellPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "index",
                |m: &WorldCellPt| { &m.index },
                |m: &mut WorldCellPt| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "world_cell_id",
                |m: &WorldCellPt| { &m.world_cell_id },
                |m: &mut WorldCellPt| { &mut m.world_cell_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WorldCellPt>(
                "WorldCellPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WorldCellPt {
        static instance: ::protobuf::rt::LazyV2<WorldCellPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WorldCellPt::new)
    }
}

impl ::protobuf::Clear for WorldCellPt {
    fn clear(&mut self) {
        self.index = 0;
        self.world_cell_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorldCellPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorldCellPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoomPt {
    // message fields
    pub room_id: u32,
    pub owner_id: u32,
    pub room_type: u32,
    pub room_status: u32,
    pub setting: ::protobuf::SingularPtrField<RoomSettingPt>,
    pub members: ::protobuf::RepeatedField<MemberPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RoomPt {
    fn default() -> &'a RoomPt {
        <RoomPt as ::protobuf::Message>::default_instance()
    }
}

impl RoomPt {
    pub fn new() -> RoomPt {
        ::std::default::Default::default()
    }

    // uint32 room_id = 1;


    pub fn get_room_id(&self) -> u32 {
        self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: u32) {
        self.room_id = v;
    }

    // uint32 owner_id = 2;


    pub fn get_owner_id(&self) -> u32 {
        self.owner_id
    }
    pub fn clear_owner_id(&mut self) {
        self.owner_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_owner_id(&mut self, v: u32) {
        self.owner_id = v;
    }

    // uint32 room_type = 3;


    pub fn get_room_type(&self) -> u32 {
        self.room_type
    }
    pub fn clear_room_type(&mut self) {
        self.room_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_type(&mut self, v: u32) {
        self.room_type = v;
    }

    // uint32 room_status = 4;


    pub fn get_room_status(&self) -> u32 {
        self.room_status
    }
    pub fn clear_room_status(&mut self) {
        self.room_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_status(&mut self, v: u32) {
        self.room_status = v;
    }

    // .protos.RoomSettingPt setting = 5;


    pub fn get_setting(&self) -> &RoomSettingPt {
        self.setting.as_ref().unwrap_or_else(|| <RoomSettingPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_setting(&mut self) {
        self.setting.clear();
    }

    pub fn has_setting(&self) -> bool {
        self.setting.is_some()
    }

    // Param is passed by value, moved
    pub fn set_setting(&mut self, v: RoomSettingPt) {
        self.setting = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_setting(&mut self) -> &mut RoomSettingPt {
        if self.setting.is_none() {
            self.setting.set_default();
        }
        self.setting.as_mut().unwrap()
    }

    // Take field
    pub fn take_setting(&mut self) -> RoomSettingPt {
        self.setting.take().unwrap_or_else(|| RoomSettingPt::new())
    }

    // repeated .protos.MemberPt members = 6;


    pub fn get_members(&self) -> &[MemberPt] {
        &self.members
    }
    pub fn clear_members(&mut self) {
        self.members.clear();
    }

    // Param is passed by value, moved
    pub fn set_members(&mut self, v: ::protobuf::RepeatedField<MemberPt>) {
        self.members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_members(&mut self) -> &mut ::protobuf::RepeatedField<MemberPt> {
        &mut self.members
    }

    // Take field
    pub fn take_members(&mut self) -> ::protobuf::RepeatedField<MemberPt> {
        ::std::mem::replace(&mut self.members, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RoomPt {
    fn is_initialized(&self) -> bool {
        for v in &self.setting {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.members {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.owner_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_type = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_status = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.setting)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.members)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.owner_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.owner_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.room_type != 0 {
            my_size += ::protobuf::rt::value_size(3, self.room_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.room_status != 0 {
            my_size += ::protobuf::rt::value_size(4, self.room_status, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.setting.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_id != 0 {
            os.write_uint32(1, self.room_id)?;
        }
        if self.owner_id != 0 {
            os.write_uint32(2, self.owner_id)?;
        }
        if self.room_type != 0 {
            os.write_uint32(3, self.room_type)?;
        }
        if self.room_status != 0 {
            os.write_uint32(4, self.room_status)?;
        }
        if let Some(ref v) = self.setting.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.members {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoomPt {
        RoomPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_id",
                |m: &RoomPt| { &m.room_id },
                |m: &mut RoomPt| { &mut m.room_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "owner_id",
                |m: &RoomPt| { &m.owner_id },
                |m: &mut RoomPt| { &mut m.owner_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_type",
                |m: &RoomPt| { &m.room_type },
                |m: &mut RoomPt| { &mut m.room_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "room_status",
                |m: &RoomPt| { &m.room_status },
                |m: &mut RoomPt| { &mut m.room_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RoomSettingPt>>(
                "setting",
                |m: &RoomPt| { &m.setting },
                |m: &mut RoomPt| { &mut m.setting },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MemberPt>>(
                "members",
                |m: &RoomPt| { &m.members },
                |m: &mut RoomPt| { &mut m.members },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RoomPt>(
                "RoomPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RoomPt {
        static instance: ::protobuf::rt::LazyV2<RoomPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RoomPt::new)
    }
}

impl ::protobuf::Clear for RoomPt {
    fn clear(&mut self) {
        self.room_id = 0;
        self.owner_id = 0;
        self.room_type = 0;
        self.room_status = 0;
        self.setting.clear();
        self.members.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoomPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoomPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HistoryMessPt {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HistoryMessPt {
    fn default() -> &'a HistoryMessPt {
        <HistoryMessPt as ::protobuf::Message>::default_instance()
    }
}

impl HistoryMessPt {
    pub fn new() -> HistoryMessPt {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for HistoryMessPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HistoryMessPt {
        HistoryMessPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HistoryMessPt>(
                "HistoryMessPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HistoryMessPt {
        static instance: ::protobuf::rt::LazyV2<HistoryMessPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HistoryMessPt::new)
    }
}

impl ::protobuf::Clear for HistoryMessPt {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HistoryMessPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistoryMessPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NoticeMessPt {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NoticeMessPt {
    fn default() -> &'a NoticeMessPt {
        <NoticeMessPt as ::protobuf::Message>::default_instance()
    }
}

impl NoticeMessPt {
    pub fn new() -> NoticeMessPt {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for NoticeMessPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NoticeMessPt {
        NoticeMessPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NoticeMessPt>(
                "NoticeMessPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NoticeMessPt {
        static instance: ::protobuf::rt::LazyV2<NoticeMessPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NoticeMessPt::new)
    }
}

impl ::protobuf::Clear for NoticeMessPt {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NoticeMessPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NoticeMessPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CharacterPt {
    // message fields
    pub cter_id: u32,
    pub last_use_skills: ::std::vec::Vec<u32>,
    pub skills: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CharacterPt {
    fn default() -> &'a CharacterPt {
        <CharacterPt as ::protobuf::Message>::default_instance()
    }
}

impl CharacterPt {
    pub fn new() -> CharacterPt {
        ::std::default::Default::default()
    }

    // uint32 cter_id = 1;


    pub fn get_cter_id(&self) -> u32 {
        self.cter_id
    }
    pub fn clear_cter_id(&mut self) {
        self.cter_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cter_id(&mut self, v: u32) {
        self.cter_id = v;
    }

    // repeated uint32 last_use_skills = 2;


    pub fn get_last_use_skills(&self) -> &[u32] {
        &self.last_use_skills
    }
    pub fn clear_last_use_skills(&mut self) {
        self.last_use_skills.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_use_skills(&mut self, v: ::std::vec::Vec<u32>) {
        self.last_use_skills = v;
    }

    // Mutable pointer to the field.
    pub fn mut_last_use_skills(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.last_use_skills
    }

    // Take field
    pub fn take_last_use_skills(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.last_use_skills, ::std::vec::Vec::new())
    }

    // repeated uint32 skills = 3;


    pub fn get_skills(&self) -> &[u32] {
        &self.skills
    }
    pub fn clear_skills(&mut self) {
        self.skills.clear();
    }

    // Param is passed by value, moved
    pub fn set_skills(&mut self, v: ::std::vec::Vec<u32>) {
        self.skills = v;
    }

    // Mutable pointer to the field.
    pub fn mut_skills(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.skills
    }

    // Take field
    pub fn take_skills(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.skills, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CharacterPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cter_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.last_use_skills)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.skills)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cter_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cter_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.last_use_skills {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.skills {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.cter_id != 0 {
            os.write_uint32(1, self.cter_id)?;
        }
        for v in &self.last_use_skills {
            os.write_uint32(2, *v)?;
        };
        for v in &self.skills {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CharacterPt {
        CharacterPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cter_id",
                |m: &CharacterPt| { &m.cter_id },
                |m: &mut CharacterPt| { &mut m.cter_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "last_use_skills",
                |m: &CharacterPt| { &m.last_use_skills },
                |m: &mut CharacterPt| { &mut m.last_use_skills },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "skills",
                |m: &CharacterPt| { &m.skills },
                |m: &mut CharacterPt| { &mut m.skills },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CharacterPt>(
                "CharacterPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CharacterPt {
        static instance: ::protobuf::rt::LazyV2<CharacterPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CharacterPt::new)
    }
}

impl ::protobuf::Clear for CharacterPt {
    fn clear(&mut self) {
        self.cter_id = 0;
        self.last_use_skills.clear();
        self.skills.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CharacterPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CharacterPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BattleCharacterPt {
    // message fields
    pub room_id: u64,
    pub user_id: u32,
    pub cter_id: u32,
    pub atk: u32,
    pub hp: u32,
    pub defence: u32,
    pub energy: u32,
    pub index: u32,
    pub gold: u32,
    pub mission: ::protobuf::SingularPtrField<MissionPt>,
    pub buffs: ::std::vec::Vec<u32>,
    pub skills: ::std::vec::Vec<u32>,
    pub items: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BattleCharacterPt {
    fn default() -> &'a BattleCharacterPt {
        <BattleCharacterPt as ::protobuf::Message>::default_instance()
    }
}

impl BattleCharacterPt {
    pub fn new() -> BattleCharacterPt {
        ::std::default::Default::default()
    }

    // uint64 room_id = 1;


    pub fn get_room_id(&self) -> u64 {
        self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: u64) {
        self.room_id = v;
    }

    // uint32 user_id = 2;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // uint32 cter_id = 3;


    pub fn get_cter_id(&self) -> u32 {
        self.cter_id
    }
    pub fn clear_cter_id(&mut self) {
        self.cter_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cter_id(&mut self, v: u32) {
        self.cter_id = v;
    }

    // uint32 atk = 4;


    pub fn get_atk(&self) -> u32 {
        self.atk
    }
    pub fn clear_atk(&mut self) {
        self.atk = 0;
    }

    // Param is passed by value, moved
    pub fn set_atk(&mut self, v: u32) {
        self.atk = v;
    }

    // uint32 hp = 5;


    pub fn get_hp(&self) -> u32 {
        self.hp
    }
    pub fn clear_hp(&mut self) {
        self.hp = 0;
    }

    // Param is passed by value, moved
    pub fn set_hp(&mut self, v: u32) {
        self.hp = v;
    }

    // uint32 defence = 6;


    pub fn get_defence(&self) -> u32 {
        self.defence
    }
    pub fn clear_defence(&mut self) {
        self.defence = 0;
    }

    // Param is passed by value, moved
    pub fn set_defence(&mut self, v: u32) {
        self.defence = v;
    }

    // uint32 energy = 7;


    pub fn get_energy(&self) -> u32 {
        self.energy
    }
    pub fn clear_energy(&mut self) {
        self.energy = 0;
    }

    // Param is passed by value, moved
    pub fn set_energy(&mut self, v: u32) {
        self.energy = v;
    }

    // uint32 index = 8;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // uint32 gold = 9;


    pub fn get_gold(&self) -> u32 {
        self.gold
    }
    pub fn clear_gold(&mut self) {
        self.gold = 0;
    }

    // Param is passed by value, moved
    pub fn set_gold(&mut self, v: u32) {
        self.gold = v;
    }

    // .protos.MissionPt mission = 10;


    pub fn get_mission(&self) -> &MissionPt {
        self.mission.as_ref().unwrap_or_else(|| <MissionPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_mission(&mut self) {
        self.mission.clear();
    }

    pub fn has_mission(&self) -> bool {
        self.mission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mission(&mut self, v: MissionPt) {
        self.mission = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mission(&mut self) -> &mut MissionPt {
        if self.mission.is_none() {
            self.mission.set_default();
        }
        self.mission.as_mut().unwrap()
    }

    // Take field
    pub fn take_mission(&mut self) -> MissionPt {
        self.mission.take().unwrap_or_else(|| MissionPt::new())
    }

    // repeated uint32 buffs = 11;


    pub fn get_buffs(&self) -> &[u32] {
        &self.buffs
    }
    pub fn clear_buffs(&mut self) {
        self.buffs.clear();
    }

    // Param is passed by value, moved
    pub fn set_buffs(&mut self, v: ::std::vec::Vec<u32>) {
        self.buffs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_buffs(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.buffs
    }

    // Take field
    pub fn take_buffs(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.buffs, ::std::vec::Vec::new())
    }

    // repeated uint32 skills = 12;


    pub fn get_skills(&self) -> &[u32] {
        &self.skills
    }
    pub fn clear_skills(&mut self) {
        self.skills.clear();
    }

    // Param is passed by value, moved
    pub fn set_skills(&mut self, v: ::std::vec::Vec<u32>) {
        self.skills = v;
    }

    // Mutable pointer to the field.
    pub fn mut_skills(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.skills
    }

    // Take field
    pub fn take_skills(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.skills, ::std::vec::Vec::new())
    }

    // repeated uint32 items = 13;


    pub fn get_items(&self) -> &[u32] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<u32>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BattleCharacterPt {
    fn is_initialized(&self) -> bool {
        for v in &self.mission {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.room_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cter_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.atk = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hp = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.defence = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.energy = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gold = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mission)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.buffs)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.skills)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cter_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cter_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.atk != 0 {
            my_size += ::protobuf::rt::value_size(4, self.atk, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hp != 0 {
            my_size += ::protobuf::rt::value_size(5, self.hp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.defence != 0 {
            my_size += ::protobuf::rt::value_size(6, self.defence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.energy != 0 {
            my_size += ::protobuf::rt::value_size(7, self.energy, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(8, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gold != 0 {
            my_size += ::protobuf::rt::value_size(9, self.gold, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.mission.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.buffs {
            my_size += ::protobuf::rt::value_size(11, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.skills {
            my_size += ::protobuf::rt::value_size(12, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.items {
            my_size += ::protobuf::rt::value_size(13, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_id != 0 {
            os.write_uint64(1, self.room_id)?;
        }
        if self.user_id != 0 {
            os.write_uint32(2, self.user_id)?;
        }
        if self.cter_id != 0 {
            os.write_uint32(3, self.cter_id)?;
        }
        if self.atk != 0 {
            os.write_uint32(4, self.atk)?;
        }
        if self.hp != 0 {
            os.write_uint32(5, self.hp)?;
        }
        if self.defence != 0 {
            os.write_uint32(6, self.defence)?;
        }
        if self.energy != 0 {
            os.write_uint32(7, self.energy)?;
        }
        if self.index != 0 {
            os.write_uint32(8, self.index)?;
        }
        if self.gold != 0 {
            os.write_uint32(9, self.gold)?;
        }
        if let Some(ref v) = self.mission.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.buffs {
            os.write_uint32(11, *v)?;
        };
        for v in &self.skills {
            os.write_uint32(12, *v)?;
        };
        for v in &self.items {
            os.write_uint32(13, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BattleCharacterPt {
        BattleCharacterPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "room_id",
                |m: &BattleCharacterPt| { &m.room_id },
                |m: &mut BattleCharacterPt| { &mut m.room_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &BattleCharacterPt| { &m.user_id },
                |m: &mut BattleCharacterPt| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cter_id",
                |m: &BattleCharacterPt| { &m.cter_id },
                |m: &mut BattleCharacterPt| { &mut m.cter_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "atk",
                |m: &BattleCharacterPt| { &m.atk },
                |m: &mut BattleCharacterPt| { &mut m.atk },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hp",
                |m: &BattleCharacterPt| { &m.hp },
                |m: &mut BattleCharacterPt| { &mut m.hp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "defence",
                |m: &BattleCharacterPt| { &m.defence },
                |m: &mut BattleCharacterPt| { &mut m.defence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "energy",
                |m: &BattleCharacterPt| { &m.energy },
                |m: &mut BattleCharacterPt| { &mut m.energy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "index",
                |m: &BattleCharacterPt| { &m.index },
                |m: &mut BattleCharacterPt| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gold",
                |m: &BattleCharacterPt| { &m.gold },
                |m: &mut BattleCharacterPt| { &mut m.gold },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MissionPt>>(
                "mission",
                |m: &BattleCharacterPt| { &m.mission },
                |m: &mut BattleCharacterPt| { &mut m.mission },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "buffs",
                |m: &BattleCharacterPt| { &m.buffs },
                |m: &mut BattleCharacterPt| { &mut m.buffs },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "skills",
                |m: &BattleCharacterPt| { &m.skills },
                |m: &mut BattleCharacterPt| { &mut m.skills },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "items",
                |m: &BattleCharacterPt| { &m.items },
                |m: &mut BattleCharacterPt| { &mut m.items },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BattleCharacterPt>(
                "BattleCharacterPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BattleCharacterPt {
        static instance: ::protobuf::rt::LazyV2<BattleCharacterPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BattleCharacterPt::new)
    }
}

impl ::protobuf::Clear for BattleCharacterPt {
    fn clear(&mut self) {
        self.room_id = 0;
        self.user_id = 0;
        self.cter_id = 0;
        self.atk = 0;
        self.hp = 0;
        self.defence = 0;
        self.energy = 0;
        self.index = 0;
        self.gold = 0;
        self.mission.clear();
        self.buffs.clear();
        self.skills.clear();
        self.items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BattleCharacterPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BattleCharacterPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MissionPt {
    // message fields
    pub mission_id: u32,
    pub progress: u32,
    pub complete: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MissionPt {
    fn default() -> &'a MissionPt {
        <MissionPt as ::protobuf::Message>::default_instance()
    }
}

impl MissionPt {
    pub fn new() -> MissionPt {
        ::std::default::Default::default()
    }

    // uint32 mission_id = 1;


    pub fn get_mission_id(&self) -> u32 {
        self.mission_id
    }
    pub fn clear_mission_id(&mut self) {
        self.mission_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_mission_id(&mut self, v: u32) {
        self.mission_id = v;
    }

    // uint32 progress = 2;


    pub fn get_progress(&self) -> u32 {
        self.progress
    }
    pub fn clear_progress(&mut self) {
        self.progress = 0;
    }

    // Param is passed by value, moved
    pub fn set_progress(&mut self, v: u32) {
        self.progress = v;
    }

    // bool complete = 3;


    pub fn get_complete(&self) -> bool {
        self.complete
    }
    pub fn clear_complete(&mut self) {
        self.complete = false;
    }

    // Param is passed by value, moved
    pub fn set_complete(&mut self, v: bool) {
        self.complete = v;
    }
}

impl ::protobuf::Message for MissionPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mission_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.progress = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.complete = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.mission_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.mission_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.progress != 0 {
            my_size += ::protobuf::rt::value_size(2, self.progress, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.complete != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.mission_id != 0 {
            os.write_uint32(1, self.mission_id)?;
        }
        if self.progress != 0 {
            os.write_uint32(2, self.progress)?;
        }
        if self.complete != false {
            os.write_bool(3, self.complete)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MissionPt {
        MissionPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "mission_id",
                |m: &MissionPt| { &m.mission_id },
                |m: &mut MissionPt| { &mut m.mission_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "progress",
                |m: &MissionPt| { &m.progress },
                |m: &mut MissionPt| { &mut m.progress },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "complete",
                |m: &MissionPt| { &m.complete },
                |m: &mut MissionPt| { &mut m.complete },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MissionPt>(
                "MissionPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MissionPt {
        static instance: ::protobuf::rt::LazyV2<MissionPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MissionPt::new)
    }
}

impl ::protobuf::Clear for MissionPt {
    fn clear(&mut self) {
        self.mission_id = 0;
        self.progress = 0;
        self.complete = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MissionPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MissionPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EffectPt {
    // message fields
    pub effect_type: u32,
    pub effect_value: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EffectPt {
    fn default() -> &'a EffectPt {
        <EffectPt as ::protobuf::Message>::default_instance()
    }
}

impl EffectPt {
    pub fn new() -> EffectPt {
        ::std::default::Default::default()
    }

    // uint32 effect_type = 2;


    pub fn get_effect_type(&self) -> u32 {
        self.effect_type
    }
    pub fn clear_effect_type(&mut self) {
        self.effect_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_effect_type(&mut self, v: u32) {
        self.effect_type = v;
    }

    // uint32 effect_value = 3;


    pub fn get_effect_value(&self) -> u32 {
        self.effect_value
    }
    pub fn clear_effect_value(&mut self) {
        self.effect_value = 0;
    }

    // Param is passed by value, moved
    pub fn set_effect_value(&mut self, v: u32) {
        self.effect_value = v;
    }
}

impl ::protobuf::Message for EffectPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.effect_type = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.effect_value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.effect_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.effect_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.effect_value != 0 {
            my_size += ::protobuf::rt::value_size(3, self.effect_value, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.effect_type != 0 {
            os.write_uint32(2, self.effect_type)?;
        }
        if self.effect_value != 0 {
            os.write_uint32(3, self.effect_value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EffectPt {
        EffectPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "effect_type",
                |m: &EffectPt| { &m.effect_type },
                |m: &mut EffectPt| { &mut m.effect_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "effect_value",
                |m: &EffectPt| { &m.effect_value },
                |m: &mut EffectPt| { &mut m.effect_value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EffectPt>(
                "EffectPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EffectPt {
        static instance: ::protobuf::rt::LazyV2<EffectPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EffectPt::new)
    }
}

impl ::protobuf::Clear for EffectPt {
    fn clear(&mut self) {
        self.effect_type = 0;
        self.effect_value = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EffectPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EffectPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TargetPt {
    // message fields
    pub target_value: ::std::vec::Vec<u32>,
    pub effects: ::protobuf::RepeatedField<EffectPt>,
    pub add_buffs: ::std::vec::Vec<u32>,
    pub passiveEffect: ::protobuf::RepeatedField<TriggerEffectPt>,
    pub lost_buffs: ::std::vec::Vec<u32>,
    pub lost_skills: ::std::vec::Vec<u32>,
    pub transform_cter: ::protobuf::SingularPtrField<BattleCharacterPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TargetPt {
    fn default() -> &'a TargetPt {
        <TargetPt as ::protobuf::Message>::default_instance()
    }
}

impl TargetPt {
    pub fn new() -> TargetPt {
        ::std::default::Default::default()
    }

    // repeated uint32 target_value = 1;


    pub fn get_target_value(&self) -> &[u32] {
        &self.target_value
    }
    pub fn clear_target_value(&mut self) {
        self.target_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_target_value(&mut self, v: ::std::vec::Vec<u32>) {
        self.target_value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_target_value(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.target_value
    }

    // Take field
    pub fn take_target_value(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.target_value, ::std::vec::Vec::new())
    }

    // repeated .protos.EffectPt effects = 2;


    pub fn get_effects(&self) -> &[EffectPt] {
        &self.effects
    }
    pub fn clear_effects(&mut self) {
        self.effects.clear();
    }

    // Param is passed by value, moved
    pub fn set_effects(&mut self, v: ::protobuf::RepeatedField<EffectPt>) {
        self.effects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_effects(&mut self) -> &mut ::protobuf::RepeatedField<EffectPt> {
        &mut self.effects
    }

    // Take field
    pub fn take_effects(&mut self) -> ::protobuf::RepeatedField<EffectPt> {
        ::std::mem::replace(&mut self.effects, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 add_buffs = 3;


    pub fn get_add_buffs(&self) -> &[u32] {
        &self.add_buffs
    }
    pub fn clear_add_buffs(&mut self) {
        self.add_buffs.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_buffs(&mut self, v: ::std::vec::Vec<u32>) {
        self.add_buffs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_add_buffs(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.add_buffs
    }

    // Take field
    pub fn take_add_buffs(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.add_buffs, ::std::vec::Vec::new())
    }

    // repeated .protos.TriggerEffectPt passiveEffect = 4;


    pub fn get_passiveEffect(&self) -> &[TriggerEffectPt] {
        &self.passiveEffect
    }
    pub fn clear_passiveEffect(&mut self) {
        self.passiveEffect.clear();
    }

    // Param is passed by value, moved
    pub fn set_passiveEffect(&mut self, v: ::protobuf::RepeatedField<TriggerEffectPt>) {
        self.passiveEffect = v;
    }

    // Mutable pointer to the field.
    pub fn mut_passiveEffect(&mut self) -> &mut ::protobuf::RepeatedField<TriggerEffectPt> {
        &mut self.passiveEffect
    }

    // Take field
    pub fn take_passiveEffect(&mut self) -> ::protobuf::RepeatedField<TriggerEffectPt> {
        ::std::mem::replace(&mut self.passiveEffect, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 lost_buffs = 5;


    pub fn get_lost_buffs(&self) -> &[u32] {
        &self.lost_buffs
    }
    pub fn clear_lost_buffs(&mut self) {
        self.lost_buffs.clear();
    }

    // Param is passed by value, moved
    pub fn set_lost_buffs(&mut self, v: ::std::vec::Vec<u32>) {
        self.lost_buffs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_lost_buffs(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.lost_buffs
    }

    // Take field
    pub fn take_lost_buffs(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.lost_buffs, ::std::vec::Vec::new())
    }

    // repeated uint32 lost_skills = 6;


    pub fn get_lost_skills(&self) -> &[u32] {
        &self.lost_skills
    }
    pub fn clear_lost_skills(&mut self) {
        self.lost_skills.clear();
    }

    // Param is passed by value, moved
    pub fn set_lost_skills(&mut self, v: ::std::vec::Vec<u32>) {
        self.lost_skills = v;
    }

    // Mutable pointer to the field.
    pub fn mut_lost_skills(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.lost_skills
    }

    // Take field
    pub fn take_lost_skills(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.lost_skills, ::std::vec::Vec::new())
    }

    // .protos.BattleCharacterPt transform_cter = 7;


    pub fn get_transform_cter(&self) -> &BattleCharacterPt {
        self.transform_cter.as_ref().unwrap_or_else(|| <BattleCharacterPt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transform_cter(&mut self) {
        self.transform_cter.clear();
    }

    pub fn has_transform_cter(&self) -> bool {
        self.transform_cter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transform_cter(&mut self, v: BattleCharacterPt) {
        self.transform_cter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transform_cter(&mut self) -> &mut BattleCharacterPt {
        if self.transform_cter.is_none() {
            self.transform_cter.set_default();
        }
        self.transform_cter.as_mut().unwrap()
    }

    // Take field
    pub fn take_transform_cter(&mut self) -> BattleCharacterPt {
        self.transform_cter.take().unwrap_or_else(|| BattleCharacterPt::new())
    }
}

impl ::protobuf::Message for TargetPt {
    fn is_initialized(&self) -> bool {
        for v in &self.effects {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.passiveEffect {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transform_cter {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.target_value)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.effects)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.add_buffs)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.passiveEffect)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.lost_buffs)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.lost_skills)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transform_cter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.target_value {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.effects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.add_buffs {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.passiveEffect {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.lost_buffs {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.lost_skills {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.transform_cter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.target_value {
            os.write_uint32(1, *v)?;
        };
        for v in &self.effects {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.add_buffs {
            os.write_uint32(3, *v)?;
        };
        for v in &self.passiveEffect {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.lost_buffs {
            os.write_uint32(5, *v)?;
        };
        for v in &self.lost_skills {
            os.write_uint32(6, *v)?;
        };
        if let Some(ref v) = self.transform_cter.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TargetPt {
        TargetPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "target_value",
                |m: &TargetPt| { &m.target_value },
                |m: &mut TargetPt| { &mut m.target_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EffectPt>>(
                "effects",
                |m: &TargetPt| { &m.effects },
                |m: &mut TargetPt| { &mut m.effects },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "add_buffs",
                |m: &TargetPt| { &m.add_buffs },
                |m: &mut TargetPt| { &mut m.add_buffs },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TriggerEffectPt>>(
                "passiveEffect",
                |m: &TargetPt| { &m.passiveEffect },
                |m: &mut TargetPt| { &mut m.passiveEffect },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lost_buffs",
                |m: &TargetPt| { &m.lost_buffs },
                |m: &mut TargetPt| { &mut m.lost_buffs },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lost_skills",
                |m: &TargetPt| { &m.lost_skills },
                |m: &mut TargetPt| { &mut m.lost_skills },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BattleCharacterPt>>(
                "transform_cter",
                |m: &TargetPt| { &m.transform_cter },
                |m: &mut TargetPt| { &mut m.transform_cter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TargetPt>(
                "TargetPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TargetPt {
        static instance: ::protobuf::rt::LazyV2<TargetPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TargetPt::new)
    }
}

impl ::protobuf::Clear for TargetPt {
    fn clear(&mut self) {
        self.target_value.clear();
        self.effects.clear();
        self.add_buffs.clear();
        self.passiveEffect.clear();
        self.lost_buffs.clear();
        self.lost_skills.clear();
        self.transform_cter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TargetPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TargetPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TriggerEffectPt {
    // message fields
    pub buff_id: u32,
    pub field_type: u32,
    pub value: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TriggerEffectPt {
    fn default() -> &'a TriggerEffectPt {
        <TriggerEffectPt as ::protobuf::Message>::default_instance()
    }
}

impl TriggerEffectPt {
    pub fn new() -> TriggerEffectPt {
        ::std::default::Default::default()
    }

    // uint32 buff_id = 1;


    pub fn get_buff_id(&self) -> u32 {
        self.buff_id
    }
    pub fn clear_buff_id(&mut self) {
        self.buff_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_buff_id(&mut self, v: u32) {
        self.buff_id = v;
    }

    // uint32 type = 2;


    pub fn get_field_type(&self) -> u32 {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: u32) {
        self.field_type = v;
    }

    // uint32 value = 3;


    pub fn get_value(&self) -> u32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u32) {
        self.value = v;
    }
}

impl ::protobuf::Message for TriggerEffectPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.buff_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_type = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.buff_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.buff_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.field_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.field_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(3, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.buff_id != 0 {
            os.write_uint32(1, self.buff_id)?;
        }
        if self.field_type != 0 {
            os.write_uint32(2, self.field_type)?;
        }
        if self.value != 0 {
            os.write_uint32(3, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TriggerEffectPt {
        TriggerEffectPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "buff_id",
                |m: &TriggerEffectPt| { &m.buff_id },
                |m: &mut TriggerEffectPt| { &mut m.buff_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "type",
                |m: &TriggerEffectPt| { &m.field_type },
                |m: &mut TriggerEffectPt| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "value",
                |m: &TriggerEffectPt| { &m.value },
                |m: &mut TriggerEffectPt| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TriggerEffectPt>(
                "TriggerEffectPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TriggerEffectPt {
        static instance: ::protobuf::rt::LazyV2<TriggerEffectPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TriggerEffectPt::new)
    }
}

impl ::protobuf::Clear for TriggerEffectPt {
    fn clear(&mut self) {
        self.buff_id = 0;
        self.field_type = 0;
        self.value = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TriggerEffectPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TriggerEffectPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActionUnitPt {
    // message fields
    pub from_user: u32,
    pub action_type: u32,
    pub action_value: ::std::vec::Vec<u32>,
    pub targets: ::protobuf::RepeatedField<TargetPt>,
    pub lost_buffs: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ActionUnitPt {
    fn default() -> &'a ActionUnitPt {
        <ActionUnitPt as ::protobuf::Message>::default_instance()
    }
}

impl ActionUnitPt {
    pub fn new() -> ActionUnitPt {
        ::std::default::Default::default()
    }

    // uint32 from_user = 1;


    pub fn get_from_user(&self) -> u32 {
        self.from_user
    }
    pub fn clear_from_user(&mut self) {
        self.from_user = 0;
    }

    // Param is passed by value, moved
    pub fn set_from_user(&mut self, v: u32) {
        self.from_user = v;
    }

    // uint32 action_type = 2;


    pub fn get_action_type(&self) -> u32 {
        self.action_type
    }
    pub fn clear_action_type(&mut self) {
        self.action_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_action_type(&mut self, v: u32) {
        self.action_type = v;
    }

    // repeated uint32 action_value = 3;


    pub fn get_action_value(&self) -> &[u32] {
        &self.action_value
    }
    pub fn clear_action_value(&mut self) {
        self.action_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_action_value(&mut self, v: ::std::vec::Vec<u32>) {
        self.action_value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_action_value(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.action_value
    }

    // Take field
    pub fn take_action_value(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.action_value, ::std::vec::Vec::new())
    }

    // repeated .protos.TargetPt targets = 4;


    pub fn get_targets(&self) -> &[TargetPt] {
        &self.targets
    }
    pub fn clear_targets(&mut self) {
        self.targets.clear();
    }

    // Param is passed by value, moved
    pub fn set_targets(&mut self, v: ::protobuf::RepeatedField<TargetPt>) {
        self.targets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_targets(&mut self) -> &mut ::protobuf::RepeatedField<TargetPt> {
        &mut self.targets
    }

    // Take field
    pub fn take_targets(&mut self) -> ::protobuf::RepeatedField<TargetPt> {
        ::std::mem::replace(&mut self.targets, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 lost_buffs = 5;


    pub fn get_lost_buffs(&self) -> &[u32] {
        &self.lost_buffs
    }
    pub fn clear_lost_buffs(&mut self) {
        self.lost_buffs.clear();
    }

    // Param is passed by value, moved
    pub fn set_lost_buffs(&mut self, v: ::std::vec::Vec<u32>) {
        self.lost_buffs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_lost_buffs(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.lost_buffs
    }

    // Take field
    pub fn take_lost_buffs(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.lost_buffs, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ActionUnitPt {
    fn is_initialized(&self) -> bool {
        for v in &self.targets {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.from_user = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.action_type = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.action_value)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.targets)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.lost_buffs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.from_user != 0 {
            my_size += ::protobuf::rt::value_size(1, self.from_user, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.action_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.action_type, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.action_value {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.targets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.lost_buffs {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.from_user != 0 {
            os.write_uint32(1, self.from_user)?;
        }
        if self.action_type != 0 {
            os.write_uint32(2, self.action_type)?;
        }
        for v in &self.action_value {
            os.write_uint32(3, *v)?;
        };
        for v in &self.targets {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.lost_buffs {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActionUnitPt {
        ActionUnitPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "from_user",
                |m: &ActionUnitPt| { &m.from_user },
                |m: &mut ActionUnitPt| { &mut m.from_user },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "action_type",
                |m: &ActionUnitPt| { &m.action_type },
                |m: &mut ActionUnitPt| { &mut m.action_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "action_value",
                |m: &ActionUnitPt| { &m.action_value },
                |m: &mut ActionUnitPt| { &mut m.action_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TargetPt>>(
                "targets",
                |m: &ActionUnitPt| { &m.targets },
                |m: &mut ActionUnitPt| { &mut m.targets },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lost_buffs",
                |m: &ActionUnitPt| { &m.lost_buffs },
                |m: &mut ActionUnitPt| { &mut m.lost_buffs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ActionUnitPt>(
                "ActionUnitPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ActionUnitPt {
        static instance: ::protobuf::rt::LazyV2<ActionUnitPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ActionUnitPt::new)
    }
}

impl ::protobuf::Clear for ActionUnitPt {
    fn clear(&mut self) {
        self.from_user = 0;
        self.action_type = 0;
        self.action_value.clear();
        self.targets.clear();
        self.lost_buffs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActionUnitPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActionUnitPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BuffPt {
    // message fields
    pub buff_id: u32,
    pub trigger_timesed: u32,
    pub keep_times: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BuffPt {
    fn default() -> &'a BuffPt {
        <BuffPt as ::protobuf::Message>::default_instance()
    }
}

impl BuffPt {
    pub fn new() -> BuffPt {
        ::std::default::Default::default()
    }

    // uint32 buff_id = 1;


    pub fn get_buff_id(&self) -> u32 {
        self.buff_id
    }
    pub fn clear_buff_id(&mut self) {
        self.buff_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_buff_id(&mut self, v: u32) {
        self.buff_id = v;
    }

    // uint32 trigger_timesed = 2;


    pub fn get_trigger_timesed(&self) -> u32 {
        self.trigger_timesed
    }
    pub fn clear_trigger_timesed(&mut self) {
        self.trigger_timesed = 0;
    }

    // Param is passed by value, moved
    pub fn set_trigger_timesed(&mut self, v: u32) {
        self.trigger_timesed = v;
    }

    // uint32 keep_times = 3;


    pub fn get_keep_times(&self) -> u32 {
        self.keep_times
    }
    pub fn clear_keep_times(&mut self) {
        self.keep_times = 0;
    }

    // Param is passed by value, moved
    pub fn set_keep_times(&mut self, v: u32) {
        self.keep_times = v;
    }
}

impl ::protobuf::Message for BuffPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.buff_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.trigger_timesed = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.keep_times = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.buff_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.buff_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.trigger_timesed != 0 {
            my_size += ::protobuf::rt::value_size(2, self.trigger_timesed, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.keep_times != 0 {
            my_size += ::protobuf::rt::value_size(3, self.keep_times, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.buff_id != 0 {
            os.write_uint32(1, self.buff_id)?;
        }
        if self.trigger_timesed != 0 {
            os.write_uint32(2, self.trigger_timesed)?;
        }
        if self.keep_times != 0 {
            os.write_uint32(3, self.keep_times)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BuffPt {
        BuffPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "buff_id",
                |m: &BuffPt| { &m.buff_id },
                |m: &mut BuffPt| { &mut m.buff_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "trigger_timesed",
                |m: &BuffPt| { &m.trigger_timesed },
                |m: &mut BuffPt| { &mut m.trigger_timesed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "keep_times",
                |m: &BuffPt| { &m.keep_times },
                |m: &mut BuffPt| { &mut m.keep_times },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BuffPt>(
                "BuffPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BuffPt {
        static instance: ::protobuf::rt::LazyV2<BuffPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BuffPt::new)
    }
}

impl ::protobuf::Clear for BuffPt {
    fn clear(&mut self) {
        self.buff_id = 0;
        self.trigger_timesed = 0;
        self.keep_times = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BuffPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BuffPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SummaryDataPt {
    // message fields
    pub user_id: u32,
    pub name: ::std::string::String,
    pub cter_id: u32,
    pub grade: u32,
    pub rank: u32,
    pub reward_score: i32,
    pub league: ::protobuf::SingularPtrField<LeaguePt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SummaryDataPt {
    fn default() -> &'a SummaryDataPt {
        <SummaryDataPt as ::protobuf::Message>::default_instance()
    }
}

impl SummaryDataPt {
    pub fn new() -> SummaryDataPt {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // uint32 cter_id = 3;


    pub fn get_cter_id(&self) -> u32 {
        self.cter_id
    }
    pub fn clear_cter_id(&mut self) {
        self.cter_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cter_id(&mut self, v: u32) {
        self.cter_id = v;
    }

    // uint32 grade = 4;


    pub fn get_grade(&self) -> u32 {
        self.grade
    }
    pub fn clear_grade(&mut self) {
        self.grade = 0;
    }

    // Param is passed by value, moved
    pub fn set_grade(&mut self, v: u32) {
        self.grade = v;
    }

    // uint32 rank = 5;


    pub fn get_rank(&self) -> u32 {
        self.rank
    }
    pub fn clear_rank(&mut self) {
        self.rank = 0;
    }

    // Param is passed by value, moved
    pub fn set_rank(&mut self, v: u32) {
        self.rank = v;
    }

    // int32 reward_score = 6;


    pub fn get_reward_score(&self) -> i32 {
        self.reward_score
    }
    pub fn clear_reward_score(&mut self) {
        self.reward_score = 0;
    }

    // Param is passed by value, moved
    pub fn set_reward_score(&mut self, v: i32) {
        self.reward_score = v;
    }

    // .protos.LeaguePt league = 7;


    pub fn get_league(&self) -> &LeaguePt {
        self.league.as_ref().unwrap_or_else(|| <LeaguePt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_league(&mut self) {
        self.league.clear();
    }

    pub fn has_league(&self) -> bool {
        self.league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league(&mut self, v: LeaguePt) {
        self.league = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_league(&mut self) -> &mut LeaguePt {
        if self.league.is_none() {
            self.league.set_default();
        }
        self.league.as_mut().unwrap()
    }

    // Take field
    pub fn take_league(&mut self) -> LeaguePt {
        self.league.take().unwrap_or_else(|| LeaguePt::new())
    }
}

impl ::protobuf::Message for SummaryDataPt {
    fn is_initialized(&self) -> bool {
        for v in &self.league {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cter_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.grade = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rank = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.reward_score = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.league)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.cter_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cter_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.grade != 0 {
            my_size += ::protobuf::rt::value_size(4, self.grade, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rank != 0 {
            my_size += ::protobuf::rt::value_size(5, self.rank, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.reward_score != 0 {
            my_size += ::protobuf::rt::value_size(6, self.reward_score, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.league.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.cter_id != 0 {
            os.write_uint32(3, self.cter_id)?;
        }
        if self.grade != 0 {
            os.write_uint32(4, self.grade)?;
        }
        if self.rank != 0 {
            os.write_uint32(5, self.rank)?;
        }
        if self.reward_score != 0 {
            os.write_int32(6, self.reward_score)?;
        }
        if let Some(ref v) = self.league.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SummaryDataPt {
        SummaryDataPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &SummaryDataPt| { &m.user_id },
                |m: &mut SummaryDataPt| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SummaryDataPt| { &m.name },
                |m: &mut SummaryDataPt| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cter_id",
                |m: &SummaryDataPt| { &m.cter_id },
                |m: &mut SummaryDataPt| { &mut m.cter_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "grade",
                |m: &SummaryDataPt| { &m.grade },
                |m: &mut SummaryDataPt| { &mut m.grade },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "rank",
                |m: &SummaryDataPt| { &m.rank },
                |m: &mut SummaryDataPt| { &mut m.rank },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "reward_score",
                |m: &SummaryDataPt| { &m.reward_score },
                |m: &mut SummaryDataPt| { &mut m.reward_score },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LeaguePt>>(
                "league",
                |m: &SummaryDataPt| { &m.league },
                |m: &mut SummaryDataPt| { &mut m.league },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SummaryDataPt>(
                "SummaryDataPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SummaryDataPt {
        static instance: ::protobuf::rt::LazyV2<SummaryDataPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SummaryDataPt::new)
    }
}

impl ::protobuf::Clear for SummaryDataPt {
    fn clear(&mut self) {
        self.user_id = 0;
        self.name.clear();
        self.cter_id = 0;
        self.grade = 0;
        self.rank = 0;
        self.reward_score = 0;
        self.league.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SummaryDataPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SummaryDataPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CterStatusPt {
    // message fields
    pub user_id: u32,
    pub skills: ::std::vec::Vec<u32>,
    pub buffs: ::protobuf::RepeatedField<BuffPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CterStatusPt {
    fn default() -> &'a CterStatusPt {
        <CterStatusPt as ::protobuf::Message>::default_instance()
    }
}

impl CterStatusPt {
    pub fn new() -> CterStatusPt {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // repeated uint32 skills = 2;


    pub fn get_skills(&self) -> &[u32] {
        &self.skills
    }
    pub fn clear_skills(&mut self) {
        self.skills.clear();
    }

    // Param is passed by value, moved
    pub fn set_skills(&mut self, v: ::std::vec::Vec<u32>) {
        self.skills = v;
    }

    // Mutable pointer to the field.
    pub fn mut_skills(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.skills
    }

    // Take field
    pub fn take_skills(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.skills, ::std::vec::Vec::new())
    }

    // repeated .protos.BuffPt buffs = 3;


    pub fn get_buffs(&self) -> &[BuffPt] {
        &self.buffs
    }
    pub fn clear_buffs(&mut self) {
        self.buffs.clear();
    }

    // Param is passed by value, moved
    pub fn set_buffs(&mut self, v: ::protobuf::RepeatedField<BuffPt>) {
        self.buffs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_buffs(&mut self) -> &mut ::protobuf::RepeatedField<BuffPt> {
        &mut self.buffs
    }

    // Take field
    pub fn take_buffs(&mut self) -> ::protobuf::RepeatedField<BuffPt> {
        ::std::mem::replace(&mut self.buffs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CterStatusPt {
    fn is_initialized(&self) -> bool {
        for v in &self.buffs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.skills)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.buffs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.skills {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.buffs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        for v in &self.skills {
            os.write_uint32(2, *v)?;
        };
        for v in &self.buffs {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CterStatusPt {
        CterStatusPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &CterStatusPt| { &m.user_id },
                |m: &mut CterStatusPt| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "skills",
                |m: &CterStatusPt| { &m.skills },
                |m: &mut CterStatusPt| { &mut m.skills },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BuffPt>>(
                "buffs",
                |m: &CterStatusPt| { &m.buffs },
                |m: &mut CterStatusPt| { &mut m.buffs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CterStatusPt>(
                "CterStatusPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CterStatusPt {
        static instance: ::protobuf::rt::LazyV2<CterStatusPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CterStatusPt::new)
    }
}

impl ::protobuf::Clear for CterStatusPt {
    fn clear(&mut self) {
        self.user_id = 0;
        self.skills.clear();
        self.buffs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CterStatusPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CterStatusPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CellBuffPt {
    // message fields
    pub index: u32,
    pub buffs: ::protobuf::RepeatedField<BuffPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CellBuffPt {
    fn default() -> &'a CellBuffPt {
        <CellBuffPt as ::protobuf::Message>::default_instance()
    }
}

impl CellBuffPt {
    pub fn new() -> CellBuffPt {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // repeated .protos.BuffPt buffs = 2;


    pub fn get_buffs(&self) -> &[BuffPt] {
        &self.buffs
    }
    pub fn clear_buffs(&mut self) {
        self.buffs.clear();
    }

    // Param is passed by value, moved
    pub fn set_buffs(&mut self, v: ::protobuf::RepeatedField<BuffPt>) {
        self.buffs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_buffs(&mut self) -> &mut ::protobuf::RepeatedField<BuffPt> {
        &mut self.buffs
    }

    // Take field
    pub fn take_buffs(&mut self) -> ::protobuf::RepeatedField<BuffPt> {
        ::std::mem::replace(&mut self.buffs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CellBuffPt {
    fn is_initialized(&self) -> bool {
        for v in &self.buffs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.buffs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.buffs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        for v in &self.buffs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CellBuffPt {
        CellBuffPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "index",
                |m: &CellBuffPt| { &m.index },
                |m: &mut CellBuffPt| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BuffPt>>(
                "buffs",
                |m: &CellBuffPt| { &m.buffs },
                |m: &mut CellBuffPt| { &mut m.buffs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CellBuffPt>(
                "CellBuffPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CellBuffPt {
        static instance: ::protobuf::rt::LazyV2<CellBuffPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CellBuffPt::new)
    }
}

impl ::protobuf::Clear for CellBuffPt {
    fn clear(&mut self) {
        self.index = 0;
        self.buffs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CellBuffPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CellBuffPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PunishMatchPt {
    // message fields
    pub start_time: i64,
    pub punish_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PunishMatchPt {
    fn default() -> &'a PunishMatchPt {
        <PunishMatchPt as ::protobuf::Message>::default_instance()
    }
}

impl PunishMatchPt {
    pub fn new() -> PunishMatchPt {
        ::std::default::Default::default()
    }

    // int64 start_time = 1;


    pub fn get_start_time(&self) -> i64 {
        self.start_time
    }
    pub fn clear_start_time(&mut self) {
        self.start_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: i64) {
        self.start_time = v;
    }

    // uint32 punish_id = 2;


    pub fn get_punish_id(&self) -> u32 {
        self.punish_id
    }
    pub fn clear_punish_id(&mut self) {
        self.punish_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_punish_id(&mut self, v: u32) {
        self.punish_id = v;
    }
}

impl ::protobuf::Message for PunishMatchPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_time = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.punish_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.start_time != 0 {
            my_size += ::protobuf::rt::value_size(1, self.start_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.punish_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.punish_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.start_time != 0 {
            os.write_int64(1, self.start_time)?;
        }
        if self.punish_id != 0 {
            os.write_uint32(2, self.punish_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PunishMatchPt {
        PunishMatchPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "start_time",
                |m: &PunishMatchPt| { &m.start_time },
                |m: &mut PunishMatchPt| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "punish_id",
                |m: &PunishMatchPt| { &m.punish_id },
                |m: &mut PunishMatchPt| { &mut m.punish_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PunishMatchPt>(
                "PunishMatchPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PunishMatchPt {
        static instance: ::protobuf::rt::LazyV2<PunishMatchPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PunishMatchPt::new)
    }
}

impl ::protobuf::Clear for PunishMatchPt {
    fn clear(&mut self) {
        self.start_time = 0;
        self.punish_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PunishMatchPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PunishMatchPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LeaguePt {
    // message fields
    pub league_score: i32,
    pub league_id: i32,
    pub league_time: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LeaguePt {
    fn default() -> &'a LeaguePt {
        <LeaguePt as ::protobuf::Message>::default_instance()
    }
}

impl LeaguePt {
    pub fn new() -> LeaguePt {
        ::std::default::Default::default()
    }

    // int32 league_score = 1;


    pub fn get_league_score(&self) -> i32 {
        self.league_score
    }
    pub fn clear_league_score(&mut self) {
        self.league_score = 0;
    }

    // Param is passed by value, moved
    pub fn set_league_score(&mut self, v: i32) {
        self.league_score = v;
    }

    // int32 league_id = 2;


    pub fn get_league_id(&self) -> i32 {
        self.league_id
    }
    pub fn clear_league_id(&mut self) {
        self.league_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: i32) {
        self.league_id = v;
    }

    // int64 league_time = 3;


    pub fn get_league_time(&self) -> i64 {
        self.league_time
    }
    pub fn clear_league_time(&mut self) {
        self.league_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_league_time(&mut self, v: i64) {
        self.league_time = v;
    }
}

impl ::protobuf::Message for LeaguePt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.league_score = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.league_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.league_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.league_score != 0 {
            my_size += ::protobuf::rt::value_size(1, self.league_score, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.league_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.league_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.league_time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.league_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.league_score != 0 {
            os.write_int32(1, self.league_score)?;
        }
        if self.league_id != 0 {
            os.write_int32(2, self.league_id)?;
        }
        if self.league_time != 0 {
            os.write_int64(3, self.league_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LeaguePt {
        LeaguePt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "league_score",
                |m: &LeaguePt| { &m.league_score },
                |m: &mut LeaguePt| { &mut m.league_score },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "league_id",
                |m: &LeaguePt| { &m.league_id },
                |m: &mut LeaguePt| { &mut m.league_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "league_time",
                |m: &LeaguePt| { &m.league_time },
                |m: &mut LeaguePt| { &mut m.league_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LeaguePt>(
                "LeaguePt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LeaguePt {
        static instance: ::protobuf::rt::LazyV2<LeaguePt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LeaguePt::new)
    }
}

impl ::protobuf::Clear for LeaguePt {
    fn clear(&mut self) {
        self.league_score = 0;
        self.league_id = 0;
        self.league_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LeaguePt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaguePt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RankInfoPt {
    // message fields
    pub user_id: u32,
    pub name: ::std::string::String,
    pub rank: i32,
    pub league: ::protobuf::SingularPtrField<LeaguePt>,
    pub cters: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RankInfoPt {
    fn default() -> &'a RankInfoPt {
        <RankInfoPt as ::protobuf::Message>::default_instance()
    }
}

impl RankInfoPt {
    pub fn new() -> RankInfoPt {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 rank = 3;


    pub fn get_rank(&self) -> i32 {
        self.rank
    }
    pub fn clear_rank(&mut self) {
        self.rank = 0;
    }

    // Param is passed by value, moved
    pub fn set_rank(&mut self, v: i32) {
        self.rank = v;
    }

    // .protos.LeaguePt league = 4;


    pub fn get_league(&self) -> &LeaguePt {
        self.league.as_ref().unwrap_or_else(|| <LeaguePt as ::protobuf::Message>::default_instance())
    }
    pub fn clear_league(&mut self) {
        self.league.clear();
    }

    pub fn has_league(&self) -> bool {
        self.league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league(&mut self, v: LeaguePt) {
        self.league = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_league(&mut self) -> &mut LeaguePt {
        if self.league.is_none() {
            self.league.set_default();
        }
        self.league.as_mut().unwrap()
    }

    // Take field
    pub fn take_league(&mut self) -> LeaguePt {
        self.league.take().unwrap_or_else(|| LeaguePt::new())
    }

    // repeated uint32 cters = 5;


    pub fn get_cters(&self) -> &[u32] {
        &self.cters
    }
    pub fn clear_cters(&mut self) {
        self.cters.clear();
    }

    // Param is passed by value, moved
    pub fn set_cters(&mut self, v: ::std::vec::Vec<u32>) {
        self.cters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cters(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.cters
    }

    // Take field
    pub fn take_cters(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.cters, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RankInfoPt {
    fn is_initialized(&self) -> bool {
        for v in &self.league {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rank = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.league)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.cters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.rank != 0 {
            my_size += ::protobuf::rt::value_size(3, self.rank, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.league.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.cters {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.rank != 0 {
            os.write_int32(3, self.rank)?;
        }
        if let Some(ref v) = self.league.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.cters {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RankInfoPt {
        RankInfoPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &RankInfoPt| { &m.user_id },
                |m: &mut RankInfoPt| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &RankInfoPt| { &m.name },
                |m: &mut RankInfoPt| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "rank",
                |m: &RankInfoPt| { &m.rank },
                |m: &mut RankInfoPt| { &mut m.rank },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LeaguePt>>(
                "league",
                |m: &RankInfoPt| { &m.league },
                |m: &mut RankInfoPt| { &mut m.league },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cters",
                |m: &RankInfoPt| { &m.cters },
                |m: &mut RankInfoPt| { &mut m.cters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RankInfoPt>(
                "RankInfoPt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RankInfoPt {
        static instance: ::protobuf::rt::LazyV2<RankInfoPt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RankInfoPt::new)
    }
}

impl ::protobuf::Clear for RankInfoPt {
    fn clear(&mut self) {
        self.user_id = 0;
        self.name.clear();
        self.rank = 0;
        self.league.clear();
        self.cters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RankInfoPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RankInfoPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nbase.proto\x12\x06protos\"\x9f\x01\n\rRoomSettingPt\x12&\n\x0fturn_l\
    imit_time\x18\x01\x20\x01(\rR\rturnLimitTime\x12\x1b\n\tseason_id\x18\
    \x02\x20\x01(\rR\x08seasonId\x12\x1c\n\nis_open_ai\x18\x03\x20\x01(\x08R\
    \x08isOpenAi\x12+\n\x11victory_condition\x18\x04\x20\x01(\rR\x10victoryC\
    ondition\"\xac\x02\n\x08PlayerPt\x12\x1b\n\tnick_name\x18\x01\x20\x01(\t\
    R\x08nickName\x12%\n\x0elast_character\x18\x02\x20\x01(\rR\rlastCharacte\
    r\x128\n\x0cpunish_match\x18\x03\x20\x01(\x0b2\x15.protos.PunishMatchPtR\
    \x0bpunishMatch\x12\x14\n\x05grade\x18\x04\x20\x01(\rR\x05grade\x12\x1f\
    \n\x0bgrade_frame\x18\x05\x20\x01(\rR\ngradeFrame\x12\x12\n\x04soul\x18\
    \x06\x20\x01(\rR\x04soul\x12\x1b\n\tbest_rank\x18\x07\x20\x01(\x05R\x08b\
    estRank\x12(\n\x06league\x18\x08\x20\x01(\x0b2\x10.protos.LeaguePtR\x06l\
    eague\x12\x10\n\x03dlc\x18\t\x20\x03(\rR\x03dlc\"C\n\x0bResourcesPt\x12\
    \x12\n\x04type\x18\x01\x20\x01(\rR\x04type\x12\x0e\n\x02id\x18\x02\x20\
    \x01(\rR\x02id\x12\x10\n\x03num\x18\x03\x20\x01(\rR\x03num\"\xc5\x02\n\
    \x08MemberPt\x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\x12\x1b\
    \n\tnick_name\x18\x02\x20\x01(\tR\x08nickName\x12'\n\x04cter\x18\x03\x20\
    \x01(\x0b2\x13.protos.CharacterPtR\x04cter\x12\x14\n\x05state\x18\x04\
    \x20\x01(\rR\x05state\x12\x14\n\x05grade\x18\x05\x20\x01(\rR\x05grade\
    \x12\x1f\n\x0bgrade_frame\x18\x06\x20\x01(\rR\ngradeFrame\x12\x12\n\x04s\
    oul\x18\x07\x20\x01(\rR\x04soul\x12\x17\n\x07team_id\x18\x08\x20\x01(\rR\
    \x06teamId\x12\x1b\n\tjoin_time\x18\t\x20\x01(\x04R\x08joinTime\x12(\n\
    \x06league\x18\n\x20\x01(\x0b2\x10.protos.LeaguePtR\x06league\x12\x19\n\
    \x08is_robot\x18\x0b\x20\x01(\x08R\x07isRobot\"G\n\x0bWorldCellPt\x12\
    \x14\n\x05index\x18\x01\x20\x01(\rR\x05index\x12\"\n\rworld_cell_id\x18\
    \x02\x20\x01(\rR\x0bworldCellId\"\xd7\x01\n\x06RoomPt\x12\x17\n\x07room_\
    id\x18\x01\x20\x01(\rR\x06roomId\x12\x19\n\x08owner_id\x18\x02\x20\x01(\
    \rR\x07ownerId\x12\x1b\n\troom_type\x18\x03\x20\x01(\rR\x08roomType\x12\
    \x1f\n\x0broom_status\x18\x04\x20\x01(\rR\nroomStatus\x12/\n\x07setting\
    \x18\x05\x20\x01(\x0b2\x15.protos.RoomSettingPtR\x07setting\x12*\n\x07me\
    mbers\x18\x06\x20\x03(\x0b2\x10.protos.MemberPtR\x07members\"\x0f\n\rHis\
    toryMessPt\"\x0e\n\x0cNoticeMessPt\"f\n\x0bCharacterPt\x12\x17\n\x07cter\
    _id\x18\x01\x20\x01(\rR\x06cterId\x12&\n\x0flast_use_skills\x18\x02\x20\
    \x03(\rR\rlastUseSkills\x12\x16\n\x06skills\x18\x03\x20\x03(\rR\x06skill\
    s\"\xcd\x02\n\x11BattleCharacterPt\x12\x17\n\x07room_id\x18\x01\x20\x01(\
    \x04R\x06roomId\x12\x17\n\x07user_id\x18\x02\x20\x01(\rR\x06userId\x12\
    \x17\n\x07cter_id\x18\x03\x20\x01(\rR\x06cterId\x12\x10\n\x03atk\x18\x04\
    \x20\x01(\rR\x03atk\x12\x0e\n\x02hp\x18\x05\x20\x01(\rR\x02hp\x12\x18\n\
    \x07defence\x18\x06\x20\x01(\rR\x07defence\x12\x16\n\x06energy\x18\x07\
    \x20\x01(\rR\x06energy\x12\x14\n\x05index\x18\x08\x20\x01(\rR\x05index\
    \x12\x12\n\x04gold\x18\t\x20\x01(\rR\x04gold\x12+\n\x07mission\x18\n\x20\
    \x01(\x0b2\x11.protos.MissionPtR\x07mission\x12\x14\n\x05buffs\x18\x0b\
    \x20\x03(\rR\x05buffs\x12\x16\n\x06skills\x18\x0c\x20\x03(\rR\x06skills\
    \x12\x14\n\x05items\x18\r\x20\x03(\rR\x05items\"b\n\tMissionPt\x12\x1d\n\
    \nmission_id\x18\x01\x20\x01(\rR\tmissionId\x12\x1a\n\x08progress\x18\
    \x02\x20\x01(\rR\x08progress\x12\x1a\n\x08complete\x18\x03\x20\x01(\x08R\
    \x08complete\"N\n\x08EffectPt\x12\x1f\n\x0beffect_type\x18\x02\x20\x01(\
    \rR\neffectType\x12!\n\x0ceffect_value\x18\x03\x20\x01(\rR\x0beffectValu\
    e\"\xb7\x02\n\x08TargetPt\x12!\n\x0ctarget_value\x18\x01\x20\x03(\rR\x0b\
    targetValue\x12*\n\x07effects\x18\x02\x20\x03(\x0b2\x10.protos.EffectPtR\
    \x07effects\x12\x1b\n\tadd_buffs\x18\x03\x20\x03(\rR\x08addBuffs\x12=\n\
    \rpassiveEffect\x18\x04\x20\x03(\x0b2\x17.protos.TriggerEffectPtR\rpassi\
    veEffect\x12\x1d\n\nlost_buffs\x18\x05\x20\x03(\rR\tlostBuffs\x12\x1f\n\
    \x0blost_skills\x18\x06\x20\x03(\rR\nlostSkills\x12@\n\x0etransform_cter\
    \x18\x07\x20\x01(\x0b2\x19.protos.BattleCharacterPtR\rtransformCter\"T\n\
    \x0fTriggerEffectPt\x12\x17\n\x07buff_id\x18\x01\x20\x01(\rR\x06buffId\
    \x12\x12\n\x04type\x18\x02\x20\x01(\rR\x04type\x12\x14\n\x05value\x18\
    \x03\x20\x01(\rR\x05value\"\xba\x01\n\x0cActionUnitPt\x12\x1b\n\tfrom_us\
    er\x18\x01\x20\x01(\rR\x08fromUser\x12\x1f\n\x0baction_type\x18\x02\x20\
    \x01(\rR\nactionType\x12!\n\x0caction_value\x18\x03\x20\x03(\rR\x0bactio\
    nValue\x12*\n\x07targets\x18\x04\x20\x03(\x0b2\x10.protos.TargetPtR\x07t\
    argets\x12\x1d\n\nlost_buffs\x18\x05\x20\x03(\rR\tlostBuffs\"i\n\x06Buff\
    Pt\x12\x17\n\x07buff_id\x18\x01\x20\x01(\rR\x06buffId\x12'\n\x0ftrigger_\
    timesed\x18\x02\x20\x01(\rR\x0etriggerTimesed\x12\x1d\n\nkeep_times\x18\
    \x03\x20\x01(\rR\tkeepTimes\"\xcc\x01\n\rSummaryDataPt\x12\x17\n\x07user\
    _id\x18\x01\x20\x01(\rR\x06userId\x12\x12\n\x04name\x18\x02\x20\x01(\tR\
    \x04name\x12\x17\n\x07cter_id\x18\x03\x20\x01(\rR\x06cterId\x12\x14\n\
    \x05grade\x18\x04\x20\x01(\rR\x05grade\x12\x12\n\x04rank\x18\x05\x20\x01\
    (\rR\x04rank\x12!\n\x0creward_score\x18\x06\x20\x01(\x05R\x0brewardScore\
    \x12(\n\x06league\x18\x07\x20\x01(\x0b2\x10.protos.LeaguePtR\x06league\"\
    e\n\x0cCterStatusPt\x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\
    \x12\x16\n\x06skills\x18\x02\x20\x03(\rR\x06skills\x12$\n\x05buffs\x18\
    \x03\x20\x03(\x0b2\x0e.protos.BuffPtR\x05buffs\"H\n\nCellBuffPt\x12\x14\
    \n\x05index\x18\x01\x20\x01(\rR\x05index\x12$\n\x05buffs\x18\x02\x20\x03\
    (\x0b2\x0e.protos.BuffPtR\x05buffs\"K\n\rPunishMatchPt\x12\x1d\n\nstart_\
    time\x18\x01\x20\x01(\x03R\tstartTime\x12\x1b\n\tpunish_id\x18\x02\x20\
    \x01(\rR\x08punishId\"k\n\x08LeaguePt\x12!\n\x0cleague_score\x18\x01\x20\
    \x01(\x05R\x0bleagueScore\x12\x1b\n\tleague_id\x18\x02\x20\x01(\x05R\x08\
    leagueId\x12\x1f\n\x0bleague_time\x18\x03\x20\x01(\x03R\nleagueTime\"\
    \x8d\x01\n\nRankInfoPt\x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userI\
    d\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x12\n\x04rank\x18\
    \x03\x20\x01(\x05R\x04rank\x12(\n\x06league\x18\x04\x20\x01(\x0b2\x10.pr\
    otos.LeaguePtR\x06league\x12\x14\n\x05cters\x18\x05\x20\x03(\rR\x05cters\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
