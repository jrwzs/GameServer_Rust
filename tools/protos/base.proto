syntax = "proto3";
package protos;

// enum RoomTypePt{
//    NONE = 0;         //无效占位数值，protobuf枚举必须包含0
//    CUSTOM = 1;       //自定义房间
//    MATCH = 2;        //匹配房间
//    SEASONPVE = 3;    //赛季PVE房间
//    WORLDBOSSPVE = 4; //世界boss房间
// }

// enum BattleTypePt {
//    NONE = 0;            //初始值
//    ONEVONEVONEVONE = 1; //1v1v1v1
//    TWOVTWO = 2;         //2v2
//    ONEVONE = 3;         //1v1
// }

message RoomSettingPt{
    uint32 turn_limit_time = 1;//回合时间限制
    int32 season_id = 2;//赛季id
    uint32 ai_level = 3;//ai等级
}

//玩家信息
message PlayerPt{
    string nick_name = 1;//昵称
    uint32 last_character = 2;//最近一次使用到角色id
    PunishMatchPt punish_match = 3; //匹配惩罚
    uint32 grade = 4;//grade
    uint32 grade_frame = 5;//grade像框
    uint32 soul = 6;//灵魂头像
    int32 best_rank = 7;//最佳排行，为负数代表没有数据
    LeaguePt  league = 8;//玩家段位数据
	repeated uint32 dlc = 9;//dlc
}

// 资源封装
message ResourcesPt{
    uint32 type = 1;//类型
    uint32 id = 2;//资源id
    uint32 num = 3;//数量
}

//队伍成员结构体
message MemberPt{
    uint32 user_id = 1;//玩家id
    string nick_name = 2;//玩家昵称
    CharacterPt cter = 3;//玩家已经选择的角色数据
    uint32 state = 4;//玩家状态，是否已经准备 1:未准备，2：准备
    uint32 grade = 5;//角色等级
    uint32 grade_frame = 6;//grade像框
    uint32 soul = 7;//灵魂头像
    uint32 team_id = 8;//玩家所属队伍id
    uint64 join_time = 9;//玩家进入房间的时间
    LeaguePt league = 10;//段位数据
    uint32 robot_temp_id = 11;//是否机器人,如果值大于0，则表示是机器人
}

message WorldCellPt{
    uint32 index = 1;       //下标
    uint32 world_cell_id = 2;//世界块id
}

//房间数据
message RoomPt{
    uint32 room_id = 1;//房间id
    uint32 owner_id = 2;//房主ID
    uint32 room_type = 3;//房间类型
    uint32 room_status = 4;//房间状态 0:未开始，1：已开始游戏
    RoomSettingPt setting = 5;//房间设置
    repeated MemberPt members = 6;//成员数据
}

//历史消息
message HistoryMessPt{

}

//推送消息
message NoticeMessPt{

}


//玩家角色数据
message CharacterPt{
    uint32 cter_temp_id = 1;//角色的配置id
    repeated uint32 last_use_skills = 2;
    repeated uint32 skills = 3;//玩家次角色所有已解锁的技能id
}

//玩家战斗角色数据
message BattleCharacterPt{
    uint32 user_id = 1;                 //玩家id
    uint32 cter_id = 2;                 //角色id（服务器生成的唯一id）
    uint32 cter_temp_id = 3;            //角色配置id
    uint32 atk = 4;                     //攻击力
    uint32 hp = 5;                      //角色血量
    uint32 defence = 6;                 //角色防御
    uint32 energy = 7;                  //角色当前能量
    uint32 index = 8;                   //角色当前位置
    bool is_major=9;                    //是否是主角色
    repeated uint32 buffs = 10;         //角色身上的buff
    repeated uint32 skills = 11;        //玩家选择的技能
    repeated uint32 items = 12;         //玩家身上的道具
    repeated uint32 minons = 13;        //召唤物集合
}

//玩家战斗数据
message BattlePlayerPt{
    uint32 user_id = 1;                     //玩家id
    string name = 2;                        //玩家名字
    LeaguePt league = 3;                    //段位数据
    uint32 gold = 4;                        //金币
    uint32 grade = 5;                       //玩家grade
    uint32 major_cter=6;                    //主角色id（服务器生成的唯一id）
    uint32 current_cter=7;                  //当前角色id（服务器生成的唯一id）
    MissionPt mission = 8;                  //任务数据
    bool is_robot = 9;                      //是否机器人
    bool is_died = 10;                      //玩家是否已经淘汰
    repeated BattleCharacterPt cters = 11;  //玩家所有的战斗角色
}



//任务
message MissionPt{
    uint32 mission_id = 1;              //任务id
    uint32 progress = 2;                //任务进度
    bool complete = 3;                  //任务是否已经完成
}

message EffectPt{
    uint32 effect_type = 2;//效果类型
    uint32 effect_value = 3;//效果值
}

//受影响封装
message TargetPt{
    repeated uint32 target_value = 1;//目标值
    repeated EffectPt effects = 2;//效果
    repeated uint32 add_buffs = 3;//对目标增加对buff
    repeated TriggerEffectPt passiveEffect = 4;	//被动效果
    repeated uint32 lost_buffs = 5;//目标失效的buff
    repeated uint32 lost_skills= 6;//玩家丢失的技能
    BattleCharacterPt transform_cter = 7;//变身之后的角色
}

//触发效果
message TriggerEffectPt{
    uint32 buff_id = 1;                 //触发的buff_id
    uint32 type = 2;					//效果类型
    uint32 value = 3;					//效果值
}

//行动单元封装
message ActionUnitPt{
    uint32 from_cter = 1;//发起的玩家,如果角色id为0，则代表纯显示的消息
    uint32 action_type = 2;//行动类型，如果from_cter=0,则此值也一定为0
    repeated uint32 action_value = 3;//行动对应类型的值，如果action_type=0，则此值一定为0
    repeated TargetPt targets = 4;//目标列表，对目标造成对影响
    repeated uint32 lost_buffs= 5;//from_cter失效的buff

}

//buff结构体
message BuffPt{
    uint32 buff_id = 1;//buffid
    uint32 trigger_timesed = 2;   //已经触发过的次数
    uint32 keep_times = 3;//剩余持续轮数
}

//结算玩家
message SummaryDataPt{
    uint32 user_id = 1;//玩家id
    string name = 2;//名字
    uint32 cter_id = 3;//角色id
    uint32 grade = 4;//当前等级
    uint32 rank = 5;//当局排名
    int32 reward_score = 6;//奖励积分
    LeaguePt league = 7;//段位数据
}

message CterStatusPt{
    uint32 user_id = 1;//玩家id
    repeated uint32 skills = 2;//角色技能
    repeated BuffPt buffs = 3;//玩家身上buff数据
}

message CellBuffPt{
    uint32 index = 1;//地图块下标
    repeated BuffPt buffs = 2;//地图块上buff数据
}

//惩罚数据
message PunishMatchPt{
    int64 start_time = 1;           //开始时间(unix时间戳，毫秒数)
    uint32 punish_id = 2;            //惩罚id
    uint32 today_id = 3;            //服务器用的，客户端不用管
}

//段位数据
message LeaguePt{
    int32 league_score = 1;//玩家总积分
    int32 league_id = 2;//段位id
    int64  league_time = 3;//进入段位时间(客户端不要管这个属性)
}

message RankInfoPt{
    uint32 user_id = 1;             //玩家id
    string name = 2;                //名字
    int32 rank=3;                  //排名
    LeaguePt league = 4;           //段位数据
    repeated uint32 cters=5;        //最常用的三个角色

}