syntax = "proto3";
package protos;

//enum RoomTypePt{
//    NONE = 0;         //无效占位数值，protobuf枚举必须包含0
//    CUSTOM = 1;       //自定义房间
//    MATCH = 2;        //匹配房间
//    SEASONPVE = 3;    //赛季PVE房间
//    WORLDBOSSPVE = 4; //世界boss房间
//}
//
//enum BattleTypePt {
//    NONE = 0;            //初始值
//    ONEVONEVONEVONE = 1; //1v1v1v1
//    TWOVTWO = 2;         //2v2
//    ONEVONE = 3;         //1v1
//}

message RoomSettingPt{
    uint32 battle_type = 1;//战斗模式
    uint32 turn_limit_time = 2;//回合时间限制
    uint32 season_id = 3;//赛季id
    bool is_open_ai = 4;//是否开启ai
    uint32 victory_condition = 5;//胜利条件
}

//玩家信息
message PlayerPt{
    string nick_name = 1;//昵称
    uint32 last_character = 2;//最近一次使用到角色id
	repeated uint32 dlc = 3;//dlc
}

// 资源封装
message ResourcesPt{
    uint32 type = 1;//类型
    uint32 id = 2;//资源id
    uint32 num = 3;//数量
}

//队伍成员结构体
message MemberPt{
    uint32 user_id = 1;//玩家id
    string nick_name = 2;//玩家昵称
    CharacterPt cter = 3;//玩家已经选择的角色数据
    uint32 state = 4;//玩家状态，是否已经准备 0:未准备，1：准备
    uint32 team_id = 5;//玩家所属队伍id
    uint64 join_time = 6;//玩家进入房间的时间
}

message WorldCellPt{
    uint32 index = 1;       //下标
    uint32 world_cell_id = 2;//世界块id
}

//房间数据
message RoomPt{
    uint32 room_id = 1;//房间id
    uint32 owner_id = 2;//房主ID
    uint32 room_type = 3;//房间类型
    uint32 room_status = 4;//房间状态 0:未开始，1：已开始游戏
    RoomSettingPt setting = 5;//房间设置
    repeated MemberPt members = 6;//成员数据
}

//历史消息
message HistoryMessPt{

}

//推送消息
message NoticeMessPt{

}


//玩家角色数据
message CharacterPt{
    uint32 cter_id = 1;//角色的配置id
    uint32 grade = 2;//角色等级
    repeated uint32 last_use_skills = 3;
    repeated uint32 skills = 4;//玩家次角色所有已解锁的技能id
}

//玩家战斗角色数据
message BattleCharacterPt{
    uint64 room_id = 1;                 //房间id
    uint32 user_id = 2;                 //玩家id
    uint32 cter_id = 3;                 //角色id
    uint32 atk = 4;                     //攻击力
    uint32 hp = 5;                      //角色血量
    uint32 defence = 6;                 //角色防御
    repeated uint32 buffs = 7;          //角色身上的buff
    repeated uint32 skills = 8;         //玩家选择的技能
    repeated uint32 items = 9;          //玩家身上的道具
}

message EffectPt{
    uint32 effect_type = 2;//效果类型
    uint32 effect_value = 3;//效果值
}

//受影响封装
message TargetPt{
    repeated uint32 target_value = 1;//目标值
    repeated EffectPt effects = 2;//效果
    repeated uint32 add_buffs = 3;//对目标增加对buff
    repeated TriggerEffectPt passiveEffect = 4;	//被动效果
    repeated uint32 lost_buffs = 5;//目标失效的buff
    BattleCharacterPt transform_cter = 6;//变身之后的角色
}

//触发效果
message TriggerEffectPt{
    uint32 buff_id = 1;                 //触发的buff_id
    uint32 type = 2;					//效果类型
    uint32 value = 3;					//效果值
}

//行动单元封装
message ActionUnitPt{
    uint32 from_user = 1;//发起的玩家
    uint32 action_type = 2;//行动类型
    repeated uint32 action_value = 3;//行动对应类型的值
    repeated TargetPt targets = 4;//目标列表
    repeated uint32 lost_buffs= 5;//玩家失效的buff
}

//buff结构体
message BuffPt{
    uint32 buff_id = 1;//buffid
    uint32 trigger_timesed = 2;   //已经触发过的次数
    uint32 keep_times = 3;//剩余持续轮数
}

//结算玩家
message SummaryDataPt{
    uint32 user_id = 1;//玩家id
    uint32 cter_id = 2;//角色id
    uint32 grade = 3;//等级
    uint32 rank = 4;//排名
}

message CterStatusPt{
    uint32 user_id = 1;//玩家id
    repeated uint32 skills = 2;//角色技能
    repeated BuffPt buffs = 3;//玩家身上buff数据
}

message CellBuffPt{
    uint32 index = 1;//地图块下标
    repeated BuffPt buffs = 2;//地图块上buff数据
}